// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OderoPaySdk
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CryptoKit
import Dispatch
import Foundation
import MobileCoreServices
@_exported import OderoPaySdk
import QuartzCore
import SafariServices
import Swift
import SystemConfiguration
import UIKit
import UniformTypeIdentifiers
import WebKit
import _Concurrency
import _StringProcessing
@objc public protocol OderoPayResultListener {
  @objc func onOderoPaySuccess(result: OderoPaySdk.OderoResult)
  @objc func onOderoPayCancelled()
  @objc func onOderoPayFailure(errorId: Swift.Int, errorMsg: Swift.String?)
}
@objc public protocol OderoResult {
  @objc func getPaymentType() -> Swift.String
  @objc func getPaymentIdList() -> [Swift.Double]?
}
public protocol RedirectHandler {
  func task(_ task: Foundation.URLSessionTask, willBeRedirectedTo request: Foundation.URLRequest, for response: Foundation.HTTPURLResponse, completion: @escaping (Foundation.URLRequest?) -> Swift.Void)
}
public struct Redirector {
  public enum Behavior {
    case follow
    case doNotFollow
    case modify((Foundation.URLSessionTask, Foundation.URLRequest, Foundation.HTTPURLResponse) -> Foundation.URLRequest?)
  }
  public static let follow: OderoPaySdk.Redirector
  public static let doNotFollow: OderoPaySdk.Redirector
  public let behavior: OderoPaySdk.Redirector.Behavior
  public init(behavior: OderoPaySdk.Redirector.Behavior)
}
extension OderoPaySdk.Redirector : OderoPaySdk.RedirectHandler {
  public func task(_ task: Foundation.URLSessionTask, willBeRedirectedTo request: Foundation.URLRequest, for response: Foundation.HTTPURLResponse, completion: @escaping (Foundation.URLRequest?) -> Swift.Void)
}
extension OderoPaySdk.RedirectHandler where Self == OderoPaySdk.Redirector {
  public static var follow: OderoPaySdk.Redirector {
    get
  }
  public static var doNotFollow: OderoPaySdk.Redirector {
    get
  }
  public static func modify(using closure: @escaping (Foundation.URLSessionTask, Foundation.URLRequest, Foundation.HTTPURLResponse) -> Foundation.URLRequest?) -> OderoPaySdk.Redirector
}
@objc public protocol Factory {
  @objc func initSDK(environment: OderoPaySdk.Environment) throws
  @objc func getOderoPay() throws -> OderoPaySdk.OderoPayLibrary
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class OderoPayFactory : ObjectiveC.NSObject, OderoPaySdk.Factory {
  public var oderoPayLibrary: OderoPaySdk.OderoPayLibrary?
  public static func getInstance() -> OderoPaySdk.Factory
  @objc public func initSDK(environment: OderoPaySdk.Environment) throws
  @objc public func getOderoPay() throws -> OderoPaySdk.OderoPayLibrary
  @objc deinit
}
public class CompletePaymentFormResult : Swift.Codable {
  public func hasData() -> OderoPaySdk.CompletePaymentFormDataResult?
  public func hasErrors() -> OderoPaySdk.CompletePaymentFormErrorResult?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct CompletePaymentFormDataResult : Swift.Codable {
  public func getHtmlContent() -> Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CompletePaymentFormErrorResult : Swift.Codable {
  public func getErrorCode() -> Swift.String
  public func getErrorDescription() -> Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol DataResponseSerializerProtocol {
  associatedtype SerializedObject
  func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Self.SerializedObject
}
public protocol DownloadResponseSerializerProtocol {
  associatedtype SerializedObject
  func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: Swift.Error?) throws -> Self.SerializedObject
}
public protocol ResponseSerializer : OderoPaySdk.DataResponseSerializerProtocol, OderoPaySdk.DownloadResponseSerializerProtocol {
  var dataPreprocessor: OderoPaySdk.DataPreprocessor { get }
  var emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> { get }
  var emptyResponseCodes: Swift.Set<Swift.Int> { get }
}
public protocol DataPreprocessor {
  func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
public struct PassthroughPreprocessor : OderoPaySdk.DataPreprocessor {
  public init()
  public func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
public struct GoogleXSSIPreprocessor : OderoPaySdk.DataPreprocessor {
  public init()
  public func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
extension OderoPaySdk.DataPreprocessor where Self == OderoPaySdk.PassthroughPreprocessor {
  public static var passthrough: OderoPaySdk.PassthroughPreprocessor {
    get
  }
}
extension OderoPaySdk.DataPreprocessor where Self == OderoPaySdk.GoogleXSSIPreprocessor {
  public static var googleXSSI: OderoPaySdk.GoogleXSSIPreprocessor {
    get
  }
}
extension OderoPaySdk.ResponseSerializer {
  public static var defaultDataPreprocessor: OderoPaySdk.DataPreprocessor {
    get
  }
  public static var defaultEmptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> {
    get
  }
  public static var defaultEmptyResponseCodes: Swift.Set<Swift.Int> {
    get
  }
  public var dataPreprocessor: OderoPaySdk.DataPreprocessor {
    get
  }
  public var emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> {
    get
  }
  public var emptyResponseCodes: Swift.Set<Swift.Int> {
    get
  }
  public func requestAllowsEmptyResponseData(_ request: Foundation.URLRequest?) -> Swift.Bool?
  public func responseAllowsEmptyResponseData(_ response: Foundation.HTTPURLResponse?) -> Swift.Bool?
  public func emptyResponseAllowed(forRequest request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?) -> Swift.Bool
}
extension OderoPaySdk.DownloadResponseSerializerProtocol where Self : OderoPaySdk.DataResponseSerializerProtocol {
  public func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: Swift.Error?) throws -> Self.SerializedObject
}
extension OderoPaySdk.DataRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (OderoPaySdk.AFDataResponse<Foundation.Data?>) -> Swift.Void) -> Self
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (OderoPaySdk.AFDataResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : OderoPaySdk.DataResponseSerializerProtocol
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (OderoPaySdk.AFDataResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : OderoPaySdk.ResponseSerializer
}
extension OderoPaySdk.DownloadRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (OderoPaySdk.AFDownloadResponse<Foundation.URL?>) -> Swift.Void) -> Self
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (OderoPaySdk.AFDownloadResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : OderoPaySdk.DownloadResponseSerializerProtocol
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (OderoPaySdk.AFDownloadResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : OderoPaySdk.ResponseSerializer
}
public struct URLResponseSerializer : OderoPaySdk.DownloadResponseSerializerProtocol {
  public init()
  public func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: Swift.Error?) throws -> Foundation.URL
  public typealias SerializedObject = Foundation.URL
}
extension OderoPaySdk.DownloadResponseSerializerProtocol where Self == OderoPaySdk.URLResponseSerializer {
  public static var url: OderoPaySdk.URLResponseSerializer {
    get
  }
}
extension OderoPaySdk.DownloadRequest {
  @discardableResult
  public func responseURL(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (OderoPaySdk.AFDownloadResponse<Foundation.URL>) -> Swift.Void) -> Self
}
final public class DataResponseSerializer : OderoPaySdk.ResponseSerializer {
  final public let dataPreprocessor: OderoPaySdk.DataPreprocessor
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod>
  public init(dataPreprocessor: OderoPaySdk.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Foundation.Data
  public typealias SerializedObject = Foundation.Data
  @objc deinit
}
extension OderoPaySdk.ResponseSerializer where Self == OderoPaySdk.DataResponseSerializer {
  public static var data: OderoPaySdk.DataResponseSerializer {
    get
  }
  public static func data(dataPreprocessor: OderoPaySdk.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> OderoPaySdk.DataResponseSerializer
}
extension OderoPaySdk.DataRequest {
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: OderoPaySdk.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (OderoPaySdk.AFDataResponse<Foundation.Data>) -> Swift.Void) -> Self
}
extension OderoPaySdk.DownloadRequest {
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: OderoPaySdk.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (OderoPaySdk.AFDownloadResponse<Foundation.Data>) -> Swift.Void) -> Self
}
final public class StringResponseSerializer : OderoPaySdk.ResponseSerializer {
  final public let dataPreprocessor: OderoPaySdk.DataPreprocessor
  final public let encoding: Swift.String.Encoding?
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod>
  public init(dataPreprocessor: OderoPaySdk.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Swift.String
  public typealias SerializedObject = Swift.String
  @objc deinit
}
extension OderoPaySdk.ResponseSerializer where Self == OderoPaySdk.StringResponseSerializer {
  public static var string: OderoPaySdk.StringResponseSerializer {
    get
  }
  public static func string(dataPreprocessor: OderoPaySdk.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> OderoPaySdk.StringResponseSerializer
}
extension OderoPaySdk.DataRequest {
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: OderoPaySdk.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (OderoPaySdk.AFDataResponse<Swift.String>) -> Swift.Void) -> Self
}
extension OderoPaySdk.DownloadRequest {
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: OderoPaySdk.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (OderoPaySdk.AFDownloadResponse<Swift.String>) -> Swift.Void) -> Self
}
@available(*, deprecated, message: "JSONResponseSerializer deprecated and will be removed in Alamofire 6. Use DecodableResponseSerializer instead.")
final public class JSONResponseSerializer : OderoPaySdk.ResponseSerializer {
  final public let dataPreprocessor: OderoPaySdk.DataPreprocessor
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod>
  final public let options: Foundation.JSONSerialization.ReadingOptions
  public init(dataPreprocessor: OderoPaySdk.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Any
  public typealias SerializedObject = Any
  @objc deinit
}
extension OderoPaySdk.DataRequest {
  @available(*, deprecated, message: "responseJSON deprecated and will be removed in Alamofire 6. Use responseDecodable instead.")
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: OderoPaySdk.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (OderoPaySdk.AFDataResponse<Any>) -> Swift.Void) -> Self
}
extension OderoPaySdk.DownloadRequest {
  @available(*, deprecated, message: "responseJSON deprecated and will be removed in Alamofire 6. Use responseDecodable instead.")
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: OderoPaySdk.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (OderoPaySdk.AFDownloadResponse<Any>) -> Swift.Void) -> Self
}
public protocol EmptyResponse {
  static func emptyValue() -> Self
}
public struct Empty : Swift.Codable {
  public static let value: OderoPaySdk.Empty
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension OderoPaySdk.Empty : OderoPaySdk.EmptyResponse {
  public static func emptyValue() -> OderoPaySdk.Empty
}
public protocol DataDecoder {
  func decode<D>(_ type: D.Type, from data: Foundation.Data) throws -> D where D : Swift.Decodable
}
extension Foundation.JSONDecoder : OderoPaySdk.DataDecoder {
}
extension Foundation.PropertyListDecoder : OderoPaySdk.DataDecoder {
}
final public class DecodableResponseSerializer<T> : OderoPaySdk.ResponseSerializer where T : Swift.Decodable {
  final public let dataPreprocessor: OderoPaySdk.DataPreprocessor
  final public let decoder: OderoPaySdk.DataDecoder
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod>
  public init(dataPreprocessor: OderoPaySdk.DataPreprocessor = DecodableResponseSerializer.defaultDataPreprocessor, decoder: OderoPaySdk.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = DecodableResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> T
  public typealias SerializedObject = T
  @objc deinit
}
extension OderoPaySdk.ResponseSerializer {
  public static func decodable<T>(of type: T.Type, dataPreprocessor: OderoPaySdk.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: OderoPaySdk.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> OderoPaySdk.DecodableResponseSerializer<T> where Self == OderoPaySdk.DecodableResponseSerializer<T>, T : Swift.Decodable
}
extension OderoPaySdk.DataRequest {
  @discardableResult
  public func responseDecodable<T>(of type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, dataPreprocessor: OderoPaySdk.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: OderoPaySdk.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods, completionHandler: @escaping (OderoPaySdk.AFDataResponse<T>) -> Swift.Void) -> Self where T : Swift.Decodable
}
extension OderoPaySdk.DownloadRequest {
  @discardableResult
  public func responseDecodable<T>(of type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, dataPreprocessor: OderoPaySdk.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: OderoPaySdk.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods, completionHandler: @escaping (OderoPaySdk.AFDownloadResponse<T>) -> Swift.Void) -> Self where T : Swift.Decodable
}
public protocol DataStreamSerializer {
  associatedtype SerializedObject
  func serialize(_ data: Foundation.Data) throws -> Self.SerializedObject
}
public struct DecodableStreamSerializer<T> : OderoPaySdk.DataStreamSerializer where T : Swift.Decodable {
  public let decoder: OderoPaySdk.DataDecoder
  public let dataPreprocessor: OderoPaySdk.DataPreprocessor
  public init(decoder: OderoPaySdk.DataDecoder = JSONDecoder(), dataPreprocessor: OderoPaySdk.DataPreprocessor = PassthroughPreprocessor())
  public func serialize(_ data: Foundation.Data) throws -> T
  public typealias SerializedObject = T
}
public struct PassthroughStreamSerializer : OderoPaySdk.DataStreamSerializer {
  public init()
  public func serialize(_ data: Foundation.Data) throws -> Foundation.Data
  public typealias SerializedObject = Foundation.Data
}
public struct StringStreamSerializer : OderoPaySdk.DataStreamSerializer {
  public init()
  public func serialize(_ data: Foundation.Data) throws -> Swift.String
  public typealias SerializedObject = Swift.String
}
extension OderoPaySdk.DataStreamSerializer {
  public static func decodable<T>(of type: T.Type, decoder: OderoPaySdk.DataDecoder = JSONDecoder(), dataPreprocessor: OderoPaySdk.DataPreprocessor = PassthroughPreprocessor()) -> Self where Self == OderoPaySdk.DecodableStreamSerializer<T>, T : Swift.Decodable
}
extension OderoPaySdk.DataStreamSerializer where Self == OderoPaySdk.PassthroughStreamSerializer {
  public static var passthrough: OderoPaySdk.PassthroughStreamSerializer {
    get
  }
}
extension OderoPaySdk.DataStreamSerializer where Self == OderoPaySdk.StringStreamSerializer {
  public static var string: OderoPaySdk.StringStreamSerializer {
    get
  }
}
extension OderoPaySdk.DataStreamRequest {
  @discardableResult
  final public func responseStream(on queue: Dispatch.DispatchQueue = .main, stream: @escaping OderoPaySdk.DataStreamRequest.Handler<Foundation.Data, Swift.Never>) -> Self
  @discardableResult
  final public func responseStream<Serializer>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main, stream: @escaping OderoPaySdk.DataStreamRequest.Handler<Serializer.SerializedObject, OderoPaySdk.AFError>) -> Self where Serializer : OderoPaySdk.DataStreamSerializer
  @discardableResult
  final public func responseStreamString(on queue: Dispatch.DispatchQueue = .main, stream: @escaping OderoPaySdk.DataStreamRequest.Handler<Swift.String, Swift.Never>) -> Self
  @discardableResult
  final public func responseStreamDecodable<T>(of type: T.Type = T.self, on queue: Dispatch.DispatchQueue = .main, using decoder: OderoPaySdk.DataDecoder = JSONDecoder(), preprocessor: OderoPaySdk.DataPreprocessor = PassthroughPreprocessor(), stream: @escaping OderoPaySdk.DataStreamRequest.Handler<T, OderoPaySdk.AFError>) -> Self where T : Swift.Decodable
}
extension OderoPaySdk.Request {
  public typealias ValidationResult = Swift.Result<Swift.Void, Swift.Error>
}
extension OderoPaySdk.DataRequest {
  public typealias Validation = (Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?) -> OderoPaySdk.DataRequest.ValidationResult
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
extension OderoPaySdk.DataStreamRequest {
  public typealias Validation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse) -> OderoPaySdk.DataStreamRequest.ValidationResult
  @discardableResult
  final public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  final public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  final public func validate() -> Self
}
extension OderoPaySdk.DownloadRequest {
  public typealias Validation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse, _ fileURL: Foundation.URL?) -> OderoPaySdk.DownloadRequest.ValidationResult
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
public struct ConversionOptions : Swift.OptionSet, Swift.CustomStringConvertible {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let None: OderoPaySdk.ConversionOptions
  public static let PropertyConverter: OderoPaySdk.ConversionOptions
  public static let PropertyMapping: OderoPaySdk.ConversionOptions
  public static let SkipPropertyValue: OderoPaySdk.ConversionOptions
  public static let KeyCleanup: OderoPaySdk.ConversionOptions
  public static let Decoding: OderoPaySdk.ConversionOptions
  public static let Encoding: OderoPaySdk.ConversionOptions
  public static var All: OderoPaySdk.ConversionOptions
  public static var DefaultNSCoding: OderoPaySdk.ConversionOptions
  public static var DefaultComparing: OderoPaySdk.ConversionOptions
  public static var DefaultDeserialize: OderoPaySdk.ConversionOptions
  public static var DefaultSerialize: OderoPaySdk.ConversionOptions
  public var description: Swift.String {
    get
  }
  public typealias ArrayLiteralElement = OderoPaySdk.ConversionOptions
  public typealias Element = OderoPaySdk.ConversionOptions
  public typealias RawValue = Swift.Int
}
public struct PaymentItem : Swift.Codable {
  public init(named name: Swift.String, for price: Swift.Double, externalId: Swift.String? = nil, subMerchantId: Swift.Int? = nil, subMerchantPrice: Swift.Double? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension Foundation.NSMutableDictionary {
  convenience public init(json: Swift.String)
  convenience public init(data: Foundation.Data)
}
extension Foundation.NSDictionary {
  public func toJsonString(prettyPrinted: Swift.Bool = false) -> Swift.String
  public func toJsonData(prettyPrinted: Swift.Bool = false) -> Foundation.Data
}
extension Foundation.NSMutableDictionary {
  public func unionInPlace(dictionary: Foundation.NSDictionary)
  public func unionInPlace<S>(sequence: S) where S : Swift.Sequence, S.Element == (Any, Any)
}
@objc @_Concurrency.MainActor(unsafe) open class PKHUDTextView : OderoPaySdk.PKHUDWideBaseView {
  @_Concurrency.MainActor(unsafe) public init(text: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @objc deinit
}
public class Card : Swift.Codable {
  public init(number cardNumber: Swift.String, expiringAt expireMonth: OderoPaySdk.Months, _ expireYear: Swift.String, withCode cvc: Swift.String, belongsTo cardHolderName: Swift.String, aliasedAs cardAlias: Swift.String? = nil, shouldBeStored storeCardAfterSuccessPayment: Swift.Bool? = nil, userKey cardUserKey: Swift.String? = nil, token cardToken: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class CompletePaymentForm : Swift.Codable {
  public init(paymentType: OderoPaySdk.PaymentMethod, orderedAs: Swift.Int? = nil, withPhase: OderoPaySdk.PaymentPhase? = nil, cardPrice: Swift.Double, walletPrice: Swift.Double? = nil, totalPointPrice: Swift.Double? = nil, loyaltyPointPrice: Swift.Double? = nil, installment: OderoPaySdk.Installment, card: OderoPaySdk.Card)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DeserializationStatus : Swift.OptionSet, Swift.CustomStringConvertible {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let None: OderoPaySdk.DeserializationStatus
  public static let IncorrectKey: OderoPaySdk.DeserializationStatus
  public static let MissingKey: OderoPaySdk.DeserializationStatus
  public static let InvalidType: OderoPaySdk.DeserializationStatus
  public static let InvalidValue: OderoPaySdk.DeserializationStatus
  public static let InvalidClass: OderoPaySdk.DeserializationStatus
  public static let MissingProtocol: OderoPaySdk.DeserializationStatus
  public static let Custom: OderoPaySdk.DeserializationStatus
  public var description: Swift.String {
    get
  }
  public typealias ArrayLiteralElement = OderoPaySdk.DeserializationStatus
  public typealias Element = OderoPaySdk.DeserializationStatus
  public typealias RawValue = Swift.Int
}
public struct AlamofireExtension<ExtendedType> {
  public var type: ExtendedType {
    get
  }
  public init(_ type: ExtendedType)
}
public protocol AlamofireExtended {
  associatedtype ExtendedType
  static var af: OderoPaySdk.AlamofireExtension<Self.ExtendedType>.Type { get set }
  var af: OderoPaySdk.AlamofireExtension<Self.ExtendedType> { get set }
}
extension OderoPaySdk.AlamofireExtended {
  public static var af: OderoPaySdk.AlamofireExtension<Self>.Type {
    get
    set
  }
  public var af: OderoPaySdk.AlamofireExtension<Self> {
    get
    set
  }
}
@objc @_Concurrency.MainActor(unsafe) open class PKHUDErrorView : OderoPaySdk.PKHUDSquareBaseView, OderoPaySdk.PKHUDAnimating {
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String? = nil, subtitle: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc public func startAnimation()
  @_Concurrency.MainActor(unsafe) @objc public func stopAnimation()
  @objc deinit
}
public enum Currency : Swift.String, Swift.Codable, Swift.CaseIterable {
  case TRY
  case AZN
  case USD
  case EURO
  public init?(rawValue: Swift.String)
  public typealias AllCases = [OderoPaySdk.Currency]
  public typealias RawValue = Swift.String
  public static var allCases: [OderoPaySdk.Currency] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum HUDContentType {
  case success
  case error
  case progress
  case image(UIKit.UIImage?)
  case rotatingImage(UIKit.UIImage?)
  case labeledSuccess(title: Swift.String?, subtitle: Swift.String?)
  case labeledError(title: Swift.String?, subtitle: Swift.String?)
  case labeledProgress(title: Swift.String?, subtitle: Swift.String?)
  case labeledImage(image: UIKit.UIImage?, title: Swift.String?, subtitle: Swift.String?)
  case labeledRotatingImage(image: UIKit.UIImage?, title: Swift.String?, subtitle: Swift.String?)
  case label(Swift.String?)
  case systemActivity
  case customView(view: UIKit.UIView)
}
@_hasMissingDesignatedInitializers final public class HUD {
  public static var dimsBackground: Swift.Bool {
    get
    set
  }
  public static var allowsInteraction: Swift.Bool {
    get
    set
  }
  public static var leadingMargin: CoreFoundation.CGFloat {
    get
    set
  }
  public static var trailingMargin: CoreFoundation.CGFloat {
    get
    set
  }
  public static var isVisible: Swift.Bool {
    get
  }
  public static func show(_ content: OderoPaySdk.HUDContentType, onView view: UIKit.UIView? = nil)
  public static func hide(_ completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public static func hide(animated: Swift.Bool, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public static func hide(afterDelay delay: Foundation.TimeInterval, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public static func flash(_ content: OderoPaySdk.HUDContentType, onView view: UIKit.UIView? = nil)
  public static func flash(_ content: OderoPaySdk.HUDContentType, onView view: UIKit.UIView? = nil, delay: Foundation.TimeInterval, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public static func registerForKeyboardNotifications()
  public static func deregisterFromKeyboardNotifications()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PKHUDSquareBaseView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public init(image: UIKit.UIImage? = nil, title: Swift.String? = nil, subtitle: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) final public let imageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let subtitleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
open class Session {
  public static let `default`: OderoPaySdk.Session
  final public let session: Foundation.URLSession
  final public let delegate: OderoPaySdk.SessionDelegate
  final public let rootQueue: Dispatch.DispatchQueue
  final public let startRequestsImmediately: Swift.Bool
  final public let requestQueue: Dispatch.DispatchQueue
  final public let serializationQueue: Dispatch.DispatchQueue
  final public let interceptor: OderoPaySdk.RequestInterceptor?
  final public let serverTrustManager: OderoPaySdk.ServerTrustManager?
  final public let redirectHandler: OderoPaySdk.RedirectHandler?
  final public let cachedResponseHandler: OderoPaySdk.CachedResponseHandler?
  final public let eventMonitor: OderoPaySdk.CompositeEventMonitor
  final public let defaultEventMonitors: [OderoPaySdk.EventMonitor]
  public init(session: Foundation.URLSession, delegate: OderoPaySdk.SessionDelegate, rootQueue: Dispatch.DispatchQueue, startRequestsImmediately: Swift.Bool = true, requestQueue: Dispatch.DispatchQueue? = nil, serializationQueue: Dispatch.DispatchQueue? = nil, interceptor: OderoPaySdk.RequestInterceptor? = nil, serverTrustManager: OderoPaySdk.ServerTrustManager? = nil, redirectHandler: OderoPaySdk.RedirectHandler? = nil, cachedResponseHandler: OderoPaySdk.CachedResponseHandler? = nil, eventMonitors: [OderoPaySdk.EventMonitor] = [])
  convenience public init(configuration: Foundation.URLSessionConfiguration = URLSessionConfiguration.af.default, delegate: OderoPaySdk.SessionDelegate = SessionDelegate(), rootQueue: Dispatch.DispatchQueue = DispatchQueue(label: "org.alamofire.session.rootQueue"), startRequestsImmediately: Swift.Bool = true, requestQueue: Dispatch.DispatchQueue? = nil, serializationQueue: Dispatch.DispatchQueue? = nil, interceptor: OderoPaySdk.RequestInterceptor? = nil, serverTrustManager: OderoPaySdk.ServerTrustManager? = nil, redirectHandler: OderoPaySdk.RedirectHandler? = nil, cachedResponseHandler: OderoPaySdk.CachedResponseHandler? = nil, eventMonitors: [OderoPaySdk.EventMonitor] = [])
  @objc deinit
  public func withAllRequests(perform action: @escaping (Swift.Set<OderoPaySdk.Request>) -> Swift.Void)
  public func cancelAllRequests(completingOnQueue queue: Dispatch.DispatchQueue = .main, completion: (() -> Swift.Void)? = nil)
  public typealias RequestModifier = (inout Foundation.URLRequest) throws -> Swift.Void
  open func request(_ convertible: OderoPaySdk.URLConvertible, method: OderoPaySdk.HTTPMethod = .get, parameters: OderoPaySdk.Parameters? = nil, encoding: OderoPaySdk.ParameterEncoding = URLEncoding.default, headers: OderoPaySdk.HTTPHeaders? = nil, interceptor: OderoPaySdk.RequestInterceptor? = nil, requestModifier: OderoPaySdk.Session.RequestModifier? = nil) -> OderoPaySdk.DataRequest
  open func request<Parameters>(_ convertible: OderoPaySdk.URLConvertible, method: OderoPaySdk.HTTPMethod = .get, parameters: Parameters? = nil, encoder: OderoPaySdk.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: OderoPaySdk.HTTPHeaders? = nil, interceptor: OderoPaySdk.RequestInterceptor? = nil, requestModifier: OderoPaySdk.Session.RequestModifier? = nil) -> OderoPaySdk.DataRequest where Parameters : Swift.Encodable
  open func request(_ convertible: OderoPaySdk.URLRequestConvertible, interceptor: OderoPaySdk.RequestInterceptor? = nil) -> OderoPaySdk.DataRequest
  open func streamRequest<Parameters>(_ convertible: OderoPaySdk.URLConvertible, method: OderoPaySdk.HTTPMethod = .get, parameters: Parameters? = nil, encoder: OderoPaySdk.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: OderoPaySdk.HTTPHeaders? = nil, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: OderoPaySdk.RequestInterceptor? = nil, requestModifier: OderoPaySdk.Session.RequestModifier? = nil) -> OderoPaySdk.DataStreamRequest where Parameters : Swift.Encodable
  open func streamRequest(_ convertible: OderoPaySdk.URLConvertible, method: OderoPaySdk.HTTPMethod = .get, headers: OderoPaySdk.HTTPHeaders? = nil, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: OderoPaySdk.RequestInterceptor? = nil, requestModifier: OderoPaySdk.Session.RequestModifier? = nil) -> OderoPaySdk.DataStreamRequest
  open func streamRequest(_ convertible: OderoPaySdk.URLRequestConvertible, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: OderoPaySdk.RequestInterceptor? = nil) -> OderoPaySdk.DataStreamRequest
  open func download(_ convertible: OderoPaySdk.URLConvertible, method: OderoPaySdk.HTTPMethod = .get, parameters: OderoPaySdk.Parameters? = nil, encoding: OderoPaySdk.ParameterEncoding = URLEncoding.default, headers: OderoPaySdk.HTTPHeaders? = nil, interceptor: OderoPaySdk.RequestInterceptor? = nil, requestModifier: OderoPaySdk.Session.RequestModifier? = nil, to destination: OderoPaySdk.DownloadRequest.Destination? = nil) -> OderoPaySdk.DownloadRequest
  open func download<Parameters>(_ convertible: OderoPaySdk.URLConvertible, method: OderoPaySdk.HTTPMethod = .get, parameters: Parameters? = nil, encoder: OderoPaySdk.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: OderoPaySdk.HTTPHeaders? = nil, interceptor: OderoPaySdk.RequestInterceptor? = nil, requestModifier: OderoPaySdk.Session.RequestModifier? = nil, to destination: OderoPaySdk.DownloadRequest.Destination? = nil) -> OderoPaySdk.DownloadRequest where Parameters : Swift.Encodable
  open func download(_ convertible: OderoPaySdk.URLRequestConvertible, interceptor: OderoPaySdk.RequestInterceptor? = nil, to destination: OderoPaySdk.DownloadRequest.Destination? = nil) -> OderoPaySdk.DownloadRequest
  open func download(resumingWith data: Foundation.Data, interceptor: OderoPaySdk.RequestInterceptor? = nil, to destination: OderoPaySdk.DownloadRequest.Destination? = nil) -> OderoPaySdk.DownloadRequest
  open func upload(_ data: Foundation.Data, to convertible: OderoPaySdk.URLConvertible, method: OderoPaySdk.HTTPMethod = .post, headers: OderoPaySdk.HTTPHeaders? = nil, interceptor: OderoPaySdk.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: OderoPaySdk.Session.RequestModifier? = nil) -> OderoPaySdk.UploadRequest
  open func upload(_ data: Foundation.Data, with convertible: OderoPaySdk.URLRequestConvertible, interceptor: OderoPaySdk.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> OderoPaySdk.UploadRequest
  open func upload(_ fileURL: Foundation.URL, to convertible: OderoPaySdk.URLConvertible, method: OderoPaySdk.HTTPMethod = .post, headers: OderoPaySdk.HTTPHeaders? = nil, interceptor: OderoPaySdk.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: OderoPaySdk.Session.RequestModifier? = nil) -> OderoPaySdk.UploadRequest
  open func upload(_ fileURL: Foundation.URL, with convertible: OderoPaySdk.URLRequestConvertible, interceptor: OderoPaySdk.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> OderoPaySdk.UploadRequest
  open func upload(_ stream: Foundation.InputStream, to convertible: OderoPaySdk.URLConvertible, method: OderoPaySdk.HTTPMethod = .post, headers: OderoPaySdk.HTTPHeaders? = nil, interceptor: OderoPaySdk.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: OderoPaySdk.Session.RequestModifier? = nil) -> OderoPaySdk.UploadRequest
  open func upload(_ stream: Foundation.InputStream, with convertible: OderoPaySdk.URLRequestConvertible, interceptor: OderoPaySdk.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> OderoPaySdk.UploadRequest
  open func upload(multipartFormData: @escaping (OderoPaySdk.MultipartFormData) -> Swift.Void, to url: OderoPaySdk.URLConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, method: OderoPaySdk.HTTPMethod = .post, headers: OderoPaySdk.HTTPHeaders? = nil, interceptor: OderoPaySdk.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: OderoPaySdk.Session.RequestModifier? = nil) -> OderoPaySdk.UploadRequest
  open func upload(multipartFormData: @escaping (OderoPaySdk.MultipartFormData) -> Swift.Void, with request: OderoPaySdk.URLRequestConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, interceptor: OderoPaySdk.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> OderoPaySdk.UploadRequest
  open func upload(multipartFormData: OderoPaySdk.MultipartFormData, to url: OderoPaySdk.URLConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, method: OderoPaySdk.HTTPMethod = .post, headers: OderoPaySdk.HTTPHeaders? = nil, interceptor: OderoPaySdk.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: OderoPaySdk.Session.RequestModifier? = nil) -> OderoPaySdk.UploadRequest
  open func upload(multipartFormData: OderoPaySdk.MultipartFormData, with request: OderoPaySdk.URLRequestConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, interceptor: OderoPaySdk.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> OderoPaySdk.UploadRequest
}
extension OderoPaySdk.Session : OderoPaySdk.RequestDelegate {
  public var sessionConfiguration: Foundation.URLSessionConfiguration {
    get
  }
  public var startImmediately: Swift.Bool {
    get
  }
  public func cleanup(after request: OderoPaySdk.Request)
  public func retryResult(for request: OderoPaySdk.Request, dueTo error: OderoPaySdk.AFError, completion: @escaping (OderoPaySdk.RetryResult) -> Swift.Void)
  public func retryRequest(_ request: OderoPaySdk.Request, withDelay timeDelay: Foundation.TimeInterval?)
}
@_hasMissingDesignatedInitializers public class Request {
  public enum State {
    case initialized
    case resumed
    case suspended
    case cancelled
    case finished
    public static func == (a: OderoPaySdk.Request.State, b: OderoPaySdk.Request.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let id: Foundation.UUID
  final public let underlyingQueue: Dispatch.DispatchQueue
  final public let serializationQueue: Dispatch.DispatchQueue
  final public let eventMonitor: OderoPaySdk.EventMonitor?
  final public let interceptor: OderoPaySdk.RequestInterceptor?
  weak public var delegate: OderoPaySdk.RequestDelegate? {
    get
  }
  public var state: OderoPaySdk.Request.State {
    get
  }
  public var isInitialized: Swift.Bool {
    get
  }
  public var isResumed: Swift.Bool {
    get
  }
  public var isSuspended: Swift.Bool {
    get
  }
  public var isCancelled: Swift.Bool {
    get
  }
  public var isFinished: Swift.Bool {
    get
  }
  public typealias ProgressHandler = (Foundation.Progress) -> Swift.Void
  final public let uploadProgress: Foundation.Progress
  final public let downloadProgress: Foundation.Progress
  public var redirectHandler: OderoPaySdk.RedirectHandler? {
    get
  }
  public var cachedResponseHandler: OderoPaySdk.CachedResponseHandler? {
    get
  }
  public var credential: Foundation.URLCredential? {
    get
  }
  public var requests: [Foundation.URLRequest] {
    get
  }
  public var firstRequest: Foundation.URLRequest? {
    get
  }
  public var lastRequest: Foundation.URLRequest? {
    get
  }
  public var request: Foundation.URLRequest? {
    get
  }
  public var performedRequests: [Foundation.URLRequest] {
    get
  }
  public var response: Foundation.HTTPURLResponse? {
    get
  }
  public var tasks: [Foundation.URLSessionTask] {
    get
  }
  public var firstTask: Foundation.URLSessionTask? {
    get
  }
  public var lastTask: Foundation.URLSessionTask? {
    get
  }
  public var task: Foundation.URLSessionTask? {
    get
  }
  public var allMetrics: [Foundation.URLSessionTaskMetrics] {
    get
  }
  public var firstMetrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var lastMetrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var retryCount: Swift.Int {
    get
  }
  public var error: OderoPaySdk.AFError? {
    get
  }
  @discardableResult
  public func cancel() -> Self
  @discardableResult
  public func suspend() -> Self
  @discardableResult
  public func resume() -> Self
  @discardableResult
  public func authenticate(username: Swift.String, password: Swift.String, persistence: Foundation.URLCredential.Persistence = .forSession) -> Self
  @discardableResult
  public func authenticate(with credential: Foundation.URLCredential) -> Self
  @discardableResult
  public func downloadProgress(queue: Dispatch.DispatchQueue = .main, closure: @escaping OderoPaySdk.Request.ProgressHandler) -> Self
  @discardableResult
  public func uploadProgress(queue: Dispatch.DispatchQueue = .main, closure: @escaping OderoPaySdk.Request.ProgressHandler) -> Self
  @discardableResult
  public func redirect(using handler: OderoPaySdk.RedirectHandler) -> Self
  @discardableResult
  public func cacheResponse(using handler: OderoPaySdk.CachedResponseHandler) -> Self
  @discardableResult
  public func cURLDescription(on queue: Dispatch.DispatchQueue, calling handler: @escaping (Swift.String) -> Swift.Void) -> Self
  @discardableResult
  public func cURLDescription(calling handler: @escaping (Swift.String) -> Swift.Void) -> Self
  @discardableResult
  public func onURLRequestCreation(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (Foundation.URLRequest) -> Swift.Void) -> Self
  @discardableResult
  public func onURLSessionTaskCreation(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (Foundation.URLSessionTask) -> Swift.Void) -> Self
  @objc deinit
}
extension OderoPaySdk.Request : Swift.Equatable {
  public static func == (lhs: OderoPaySdk.Request, rhs: OderoPaySdk.Request) -> Swift.Bool
}
extension OderoPaySdk.Request : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension OderoPaySdk.Request : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension OderoPaySdk.Request {
  public func cURLDescription() -> Swift.String
}
public protocol RequestDelegate : AnyObject {
  var sessionConfiguration: Foundation.URLSessionConfiguration { get }
  var startImmediately: Swift.Bool { get }
  func cleanup(after request: OderoPaySdk.Request)
  func retryResult(for request: OderoPaySdk.Request, dueTo error: OderoPaySdk.AFError, completion: @escaping (OderoPaySdk.RetryResult) -> Swift.Void)
  func retryRequest(_ request: OderoPaySdk.Request, withDelay timeDelay: Foundation.TimeInterval?)
}
@_hasMissingDesignatedInitializers public class DataRequest : OderoPaySdk.Request {
  final public let convertible: OderoPaySdk.URLRequestConvertible
  public var data: Foundation.Data? {
    get
  }
  @discardableResult
  public func validate(_ validation: @escaping OderoPaySdk.DataRequest.Validation) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DataStreamRequest : OderoPaySdk.Request {
  public typealias Handler<Success, Failure> = (OderoPaySdk.DataStreamRequest.Stream<Success, Failure>) throws -> Swift.Void where Failure : Swift.Error
  public struct Stream<Success, Failure> where Failure : Swift.Error {
    public let event: OderoPaySdk.DataStreamRequest.Event<Success, Failure>
    public let token: OderoPaySdk.DataStreamRequest.CancellationToken
    public func cancel()
  }
  public enum Event<Success, Failure> where Failure : Swift.Error {
    case stream(Swift.Result<Success, Failure>)
    case complete(OderoPaySdk.DataStreamRequest.Completion)
  }
  public struct Completion {
    public let request: Foundation.URLRequest?
    public let response: Foundation.HTTPURLResponse?
    public let metrics: Foundation.URLSessionTaskMetrics?
    public let error: OderoPaySdk.AFError?
  }
  public struct CancellationToken {
    public func cancel()
  }
  final public let convertible: OderoPaySdk.URLRequestConvertible
  final public let automaticallyCancelOnStreamError: Swift.Bool
  @discardableResult
  final public func validate(_ validation: @escaping OderoPaySdk.DataStreamRequest.Validation) -> Self
  final public func asInputStream(bufferSize: Swift.Int = 1024) -> Foundation.InputStream?
  @objc deinit
}
extension OderoPaySdk.DataStreamRequest.Stream {
  public var result: Swift.Result<Success, Failure>? {
    get
  }
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public var completion: OderoPaySdk.DataStreamRequest.Completion? {
    get
  }
}
@_hasMissingDesignatedInitializers public class DownloadRequest : OderoPaySdk.Request {
  public struct Options : Swift.OptionSet {
    public static let createIntermediateDirectories: OderoPaySdk.DownloadRequest.Options
    public static let removePreviousFile: OderoPaySdk.DownloadRequest.Options
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public typealias ArrayLiteralElement = OderoPaySdk.DownloadRequest.Options
    public typealias Element = OderoPaySdk.DownloadRequest.Options
    public typealias RawValue = Swift.Int
  }
  public typealias Destination = (_ temporaryURL: Foundation.URL, _ response: Foundation.HTTPURLResponse) -> (destinationURL: Foundation.URL, options: OderoPaySdk.DownloadRequest.Options)
  public class func suggestedDownloadDestination(for directory: Foundation.FileManager.SearchPathDirectory = .documentDirectory, in domain: Foundation.FileManager.SearchPathDomainMask = .userDomainMask, options: OderoPaySdk.DownloadRequest.Options = []) -> OderoPaySdk.DownloadRequest.Destination
  public enum Downloadable {
    case request(OderoPaySdk.URLRequestConvertible)
    case resumeData(Foundation.Data)
  }
  public var resumeData: Foundation.Data? {
    get
  }
  public var fileURL: Foundation.URL? {
    get
  }
  final public let downloadable: OderoPaySdk.DownloadRequest.Downloadable
  public func task(forResumeData data: Foundation.Data, using session: Foundation.URLSession) -> Foundation.URLSessionTask
  @discardableResult
  override public func cancel() -> Self
  @discardableResult
  public func cancel(producingResumeData shouldProduceResumeData: Swift.Bool) -> Self
  @discardableResult
  public func cancel(byProducingResumeData completionHandler: @escaping (_ data: Foundation.Data?) -> Swift.Void) -> Self
  @discardableResult
  public func validate(_ validation: @escaping OderoPaySdk.DownloadRequest.Validation) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UploadRequest : OderoPaySdk.DataRequest {
  public enum Uploadable {
    case data(Foundation.Data)
    case file(Foundation.URL, shouldRemove: Swift.Bool)
    case stream(Foundation.InputStream)
  }
  final public let upload: OderoPaySdk.UploadableConvertible
  final public let fileManager: Foundation.FileManager
  public var uploadable: OderoPaySdk.UploadRequest.Uploadable?
  public func cleanup()
  @objc deinit
}
public protocol UploadableConvertible {
  func createUploadable() throws -> OderoPaySdk.UploadRequest.Uploadable
}
extension OderoPaySdk.UploadRequest.Uploadable : OderoPaySdk.UploadableConvertible {
  public func createUploadable() throws -> OderoPaySdk.UploadRequest.Uploadable
}
public protocol UploadConvertible : OderoPaySdk.URLRequestConvertible, OderoPaySdk.UploadableConvertible {
}
final public class URLEncodedFormEncoder {
  public enum ArrayEncoding {
    case brackets
    case noBrackets
    case indexInBrackets
    public static func == (a: OderoPaySdk.URLEncodedFormEncoder.ArrayEncoding, b: OderoPaySdk.URLEncodedFormEncoder.ArrayEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum BoolEncoding {
    case numeric
    case literal
    public static func == (a: OderoPaySdk.URLEncodedFormEncoder.BoolEncoding, b: OderoPaySdk.URLEncodedFormEncoder.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum DataEncoding {
    case deferredToData
    case base64
    case custom((Foundation.Data) throws -> Swift.String)
  }
  public enum DateEncoding {
    case deferredToDate
    case secondsSince1970
    case millisecondsSince1970
    case iso8601
    case formatted(Foundation.DateFormatter)
    case custom((Foundation.Date) throws -> Swift.String)
  }
  public enum KeyEncoding {
    case useDefaultKeys
    case convertToSnakeCase
    case convertToKebabCase
    case capitalized
    case uppercased
    case lowercased
    case custom((Swift.String) -> Swift.String)
  }
  public enum SpaceEncoding {
    case percentEscaped
    case plusReplaced
    public static func == (a: OderoPaySdk.URLEncodedFormEncoder.SpaceEncoding, b: OderoPaySdk.URLEncodedFormEncoder.SpaceEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Error : Swift.Error {
    case invalidRootObject(Swift.String)
  }
  final public let alphabetizeKeyValuePairs: Swift.Bool
  final public let arrayEncoding: OderoPaySdk.URLEncodedFormEncoder.ArrayEncoding
  final public let boolEncoding: OderoPaySdk.URLEncodedFormEncoder.BoolEncoding
  final public let dataEncoding: OderoPaySdk.URLEncodedFormEncoder.DataEncoding
  final public let dateEncoding: OderoPaySdk.URLEncodedFormEncoder.DateEncoding
  final public let keyEncoding: OderoPaySdk.URLEncodedFormEncoder.KeyEncoding
  final public let spaceEncoding: OderoPaySdk.URLEncodedFormEncoder.SpaceEncoding
  final public var allowedCharacters: Foundation.CharacterSet
  public init(alphabetizeKeyValuePairs: Swift.Bool = true, arrayEncoding: OderoPaySdk.URLEncodedFormEncoder.ArrayEncoding = .brackets, boolEncoding: OderoPaySdk.URLEncodedFormEncoder.BoolEncoding = .numeric, dataEncoding: OderoPaySdk.URLEncodedFormEncoder.DataEncoding = .base64, dateEncoding: OderoPaySdk.URLEncodedFormEncoder.DateEncoding = .deferredToDate, keyEncoding: OderoPaySdk.URLEncodedFormEncoder.KeyEncoding = .useDefaultKeys, spaceEncoding: OderoPaySdk.URLEncodedFormEncoder.SpaceEncoding = .percentEscaped, allowedCharacters: Foundation.CharacterSet = .afURLQueryAllowed)
  final public func encode(_ value: Swift.Encodable) throws -> Swift.String
  final public func encode(_ value: Swift.Encodable) throws -> Foundation.Data
  @objc deinit
}
extension Foundation.CharacterSet {
  public static let afURLQueryAllowed: Foundation.CharacterSet
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PKHUDWideBaseView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public protocol EventMonitor {
  var queue: Dispatch.DispatchQueue { get }
  func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  func request(_ request: OderoPaySdk.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  func request(_ request: OderoPaySdk.Request, didFailToCreateURLRequestWithError error: OderoPaySdk.AFError)
  func request(_ request: OderoPaySdk.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  func request(_ request: OderoPaySdk.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: OderoPaySdk.AFError)
  func request(_ request: OderoPaySdk.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  func request(_ request: OderoPaySdk.Request, didCreateTask task: Foundation.URLSessionTask)
  func request(_ request: OderoPaySdk.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  func request(_ request: OderoPaySdk.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: OderoPaySdk.AFError)
  func request(_ request: OderoPaySdk.Request, didCompleteTask task: Foundation.URLSessionTask, with error: OderoPaySdk.AFError?)
  func requestIsRetrying(_ request: OderoPaySdk.Request)
  func requestDidFinish(_ request: OderoPaySdk.Request)
  func requestDidResume(_ request: OderoPaySdk.Request)
  func request(_ request: OderoPaySdk.Request, didResumeTask task: Foundation.URLSessionTask)
  func requestDidSuspend(_ request: OderoPaySdk.Request)
  func request(_ request: OderoPaySdk.Request, didSuspendTask task: Foundation.URLSessionTask)
  func requestDidCancel(_ request: OderoPaySdk.Request)
  func request(_ request: OderoPaySdk.Request, didCancelTask task: Foundation.URLSessionTask)
  func request(_ request: OderoPaySdk.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: OderoPaySdk.Request.ValidationResult)
  func request(_ request: OderoPaySdk.DataRequest, didParseResponse response: OderoPaySdk.DataResponse<Foundation.Data?, OderoPaySdk.AFError>)
  func request<Value>(_ request: OderoPaySdk.DataRequest, didParseResponse response: OderoPaySdk.DataResponse<Value, OderoPaySdk.AFError>)
  func request(_ request: OderoPaySdk.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: OderoPaySdk.Request.ValidationResult)
  func request<Value>(_ request: OderoPaySdk.DataStreamRequest, didParseStream result: Swift.Result<Value, OderoPaySdk.AFError>)
  func request(_ request: OderoPaySdk.UploadRequest, didCreateUploadable uploadable: OderoPaySdk.UploadRequest.Uploadable)
  func request(_ request: OderoPaySdk.UploadRequest, didFailToCreateUploadableWithError error: OderoPaySdk.AFError)
  func request(_ request: OderoPaySdk.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  func request(_ request: OderoPaySdk.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, OderoPaySdk.AFError>)
  func request(_ request: OderoPaySdk.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  func request(_ request: OderoPaySdk.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: OderoPaySdk.Request.ValidationResult)
  func request(_ request: OderoPaySdk.DownloadRequest, didParseResponse response: OderoPaySdk.DownloadResponse<Foundation.URL?, OderoPaySdk.AFError>)
  func request<Value>(_ request: OderoPaySdk.DownloadRequest, didParseResponse response: OderoPaySdk.DownloadResponse<Value, OderoPaySdk.AFError>)
}
extension OderoPaySdk.EventMonitor {
  public var queue: Dispatch.DispatchQueue {
    get
  }
  public func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  public func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  public func request(_ request: OderoPaySdk.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  public func request(_ request: OderoPaySdk.Request, didFailToCreateURLRequestWithError error: OderoPaySdk.AFError)
  public func request(_ request: OderoPaySdk.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  public func request(_ request: OderoPaySdk.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: OderoPaySdk.AFError)
  public func request(_ request: OderoPaySdk.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  public func request(_ request: OderoPaySdk.Request, didCreateTask task: Foundation.URLSessionTask)
  public func request(_ request: OderoPaySdk.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  public func request(_ request: OderoPaySdk.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: OderoPaySdk.AFError)
  public func request(_ request: OderoPaySdk.Request, didCompleteTask task: Foundation.URLSessionTask, with error: OderoPaySdk.AFError?)
  public func requestIsRetrying(_ request: OderoPaySdk.Request)
  public func requestDidFinish(_ request: OderoPaySdk.Request)
  public func requestDidResume(_ request: OderoPaySdk.Request)
  public func request(_ request: OderoPaySdk.Request, didResumeTask task: Foundation.URLSessionTask)
  public func requestDidSuspend(_ request: OderoPaySdk.Request)
  public func request(_ request: OderoPaySdk.Request, didSuspendTask task: Foundation.URLSessionTask)
  public func requestDidCancel(_ request: OderoPaySdk.Request)
  public func request(_ request: OderoPaySdk.Request, didCancelTask task: Foundation.URLSessionTask)
  public func request(_ request: OderoPaySdk.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: OderoPaySdk.Request.ValidationResult)
  public func request(_ request: OderoPaySdk.DataRequest, didParseResponse response: OderoPaySdk.DataResponse<Foundation.Data?, OderoPaySdk.AFError>)
  public func request<Value>(_ request: OderoPaySdk.DataRequest, didParseResponse response: OderoPaySdk.DataResponse<Value, OderoPaySdk.AFError>)
  public func request(_ request: OderoPaySdk.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: OderoPaySdk.Request.ValidationResult)
  public func request<Value>(_ request: OderoPaySdk.DataStreamRequest, didParseStream result: Swift.Result<Value, OderoPaySdk.AFError>)
  public func request(_ request: OderoPaySdk.UploadRequest, didCreateUploadable uploadable: OderoPaySdk.UploadRequest.Uploadable)
  public func request(_ request: OderoPaySdk.UploadRequest, didFailToCreateUploadableWithError error: OderoPaySdk.AFError)
  public func request(_ request: OderoPaySdk.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  public func request(_ request: OderoPaySdk.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, OderoPaySdk.AFError>)
  public func request(_ request: OderoPaySdk.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  public func request(_ request: OderoPaySdk.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: OderoPaySdk.Request.ValidationResult)
  public func request(_ request: OderoPaySdk.DownloadRequest, didParseResponse response: OderoPaySdk.DownloadResponse<Foundation.URL?, OderoPaySdk.AFError>)
  public func request<Value>(_ request: OderoPaySdk.DownloadRequest, didParseResponse response: OderoPaySdk.DownloadResponse<Value, OderoPaySdk.AFError>)
}
@_hasMissingDesignatedInitializers final public class CompositeEventMonitor : OderoPaySdk.EventMonitor {
  final public let queue: Dispatch.DispatchQueue
  final public func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  final public func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  final public func request(_ request: OderoPaySdk.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  final public func request(_ request: OderoPaySdk.Request, didFailToCreateURLRequestWithError error: OderoPaySdk.AFError)
  final public func request(_ request: OderoPaySdk.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  final public func request(_ request: OderoPaySdk.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: OderoPaySdk.AFError)
  final public func request(_ request: OderoPaySdk.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  final public func request(_ request: OderoPaySdk.Request, didCreateTask task: Foundation.URLSessionTask)
  final public func request(_ request: OderoPaySdk.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  final public func request(_ request: OderoPaySdk.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: OderoPaySdk.AFError)
  final public func request(_ request: OderoPaySdk.Request, didCompleteTask task: Foundation.URLSessionTask, with error: OderoPaySdk.AFError?)
  final public func requestIsRetrying(_ request: OderoPaySdk.Request)
  final public func requestDidFinish(_ request: OderoPaySdk.Request)
  final public func requestDidResume(_ request: OderoPaySdk.Request)
  final public func request(_ request: OderoPaySdk.Request, didResumeTask task: Foundation.URLSessionTask)
  final public func requestDidSuspend(_ request: OderoPaySdk.Request)
  final public func request(_ request: OderoPaySdk.Request, didSuspendTask task: Foundation.URLSessionTask)
  final public func requestDidCancel(_ request: OderoPaySdk.Request)
  final public func request(_ request: OderoPaySdk.Request, didCancelTask task: Foundation.URLSessionTask)
  final public func request(_ request: OderoPaySdk.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: OderoPaySdk.Request.ValidationResult)
  final public func request(_ request: OderoPaySdk.DataRequest, didParseResponse response: OderoPaySdk.DataResponse<Foundation.Data?, OderoPaySdk.AFError>)
  final public func request<Value>(_ request: OderoPaySdk.DataRequest, didParseResponse response: OderoPaySdk.DataResponse<Value, OderoPaySdk.AFError>)
  final public func request(_ request: OderoPaySdk.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: OderoPaySdk.Request.ValidationResult)
  final public func request<Value>(_ request: OderoPaySdk.DataStreamRequest, didParseStream result: Swift.Result<Value, OderoPaySdk.AFError>)
  final public func request(_ request: OderoPaySdk.UploadRequest, didCreateUploadable uploadable: OderoPaySdk.UploadRequest.Uploadable)
  final public func request(_ request: OderoPaySdk.UploadRequest, didFailToCreateUploadableWithError error: OderoPaySdk.AFError)
  final public func request(_ request: OderoPaySdk.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  final public func request(_ request: OderoPaySdk.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, OderoPaySdk.AFError>)
  final public func request(_ request: OderoPaySdk.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  final public func request(_ request: OderoPaySdk.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: OderoPaySdk.Request.ValidationResult)
  final public func request(_ request: OderoPaySdk.DownloadRequest, didParseResponse response: OderoPaySdk.DownloadResponse<Foundation.URL?, OderoPaySdk.AFError>)
  final public func request<Value>(_ request: OderoPaySdk.DownloadRequest, didParseResponse response: OderoPaySdk.DownloadResponse<Value, OderoPaySdk.AFError>)
  @objc deinit
}
open class ClosureEventMonitor : OderoPaySdk.EventMonitor {
  open var sessionDidBecomeInvalidWithError: ((Foundation.URLSession, Swift.Error?) -> Swift.Void)?
  open var taskDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge) -> Swift.Void)?
  open var taskDidSendBodyData: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var taskNeedNewBodyStream: ((Foundation.URLSession, Foundation.URLSessionTask) -> Swift.Void)?
  open var taskWillPerformHTTPRedirection: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest) -> Swift.Void)?
  open var taskDidFinishCollectingMetrics: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLSessionTaskMetrics) -> Swift.Void)?
  open var taskDidComplete: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Error?) -> Swift.Void)?
  open var taskIsWaitingForConnectivity: ((Foundation.URLSession, Foundation.URLSessionTask) -> Swift.Void)?
  open var dataTaskDidReceiveData: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.Data) -> Swift.Void)?
  open var dataTaskWillCacheResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Swift.Void)?
  open var downloadTaskDidFinishDownloadingToURL: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Foundation.URL) -> Swift.Void)?
  open var downloadTaskDidWriteData: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var downloadTaskDidResumeAtOffset: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var requestDidCreateInitialURLRequest: ((OderoPaySdk.Request, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidFailToCreateURLRequestWithError: ((OderoPaySdk.Request, OderoPaySdk.AFError) -> Swift.Void)?
  open var requestDidAdaptInitialRequestToAdaptedRequest: ((OderoPaySdk.Request, Foundation.URLRequest, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidFailToAdaptURLRequestWithError: ((OderoPaySdk.Request, Foundation.URLRequest, OderoPaySdk.AFError) -> Swift.Void)?
  open var requestDidCreateURLRequest: ((OderoPaySdk.Request, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidCreateTask: ((OderoPaySdk.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidGatherMetrics: ((OderoPaySdk.Request, Foundation.URLSessionTaskMetrics) -> Swift.Void)?
  open var requestDidFailTaskEarlyWithError: ((OderoPaySdk.Request, Foundation.URLSessionTask, OderoPaySdk.AFError) -> Swift.Void)?
  open var requestDidCompleteTaskWithError: ((OderoPaySdk.Request, Foundation.URLSessionTask, OderoPaySdk.AFError?) -> Swift.Void)?
  open var requestIsRetrying: ((OderoPaySdk.Request) -> Swift.Void)?
  open var requestDidFinish: ((OderoPaySdk.Request) -> Swift.Void)?
  open var requestDidResume: ((OderoPaySdk.Request) -> Swift.Void)?
  open var requestDidResumeTask: ((OderoPaySdk.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidSuspend: ((OderoPaySdk.Request) -> Swift.Void)?
  open var requestDidSuspendTask: ((OderoPaySdk.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidCancel: ((OderoPaySdk.Request) -> Swift.Void)?
  open var requestDidCancelTask: ((OderoPaySdk.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidValidateRequestResponseDataWithResult: ((OderoPaySdk.DataRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?, OderoPaySdk.Request.ValidationResult) -> Swift.Void)?
  open var requestDidParseResponse: ((OderoPaySdk.DataRequest, OderoPaySdk.DataResponse<Foundation.Data?, OderoPaySdk.AFError>) -> Swift.Void)?
  open var requestDidValidateRequestResponseWithResult: ((OderoPaySdk.DataStreamRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, OderoPaySdk.Request.ValidationResult) -> Swift.Void)?
  open var requestDidCreateUploadable: ((OderoPaySdk.UploadRequest, OderoPaySdk.UploadRequest.Uploadable) -> Swift.Void)?
  open var requestDidFailToCreateUploadableWithError: ((OderoPaySdk.UploadRequest, OderoPaySdk.AFError) -> Swift.Void)?
  open var requestDidProvideInputStream: ((OderoPaySdk.UploadRequest, Foundation.InputStream) -> Swift.Void)?
  open var requestDidFinishDownloadingUsingTaskWithResult: ((OderoPaySdk.DownloadRequest, Foundation.URLSessionTask, Swift.Result<Foundation.URL, OderoPaySdk.AFError>) -> Swift.Void)?
  open var requestDidCreateDestinationURL: ((OderoPaySdk.DownloadRequest, Foundation.URL) -> Swift.Void)?
  open var requestDidValidateRequestResponseFileURLWithResult: ((OderoPaySdk.DownloadRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.URL?, OderoPaySdk.Request.ValidationResult) -> Swift.Void)?
  open var requestDidParseDownloadResponse: ((OderoPaySdk.DownloadRequest, OderoPaySdk.DownloadResponse<Foundation.URL?, OderoPaySdk.AFError>) -> Swift.Void)?
  final public let queue: Dispatch.DispatchQueue
  public init(queue: Dispatch.DispatchQueue = .main)
  open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  open func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  open func request(_ request: OderoPaySdk.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  open func request(_ request: OderoPaySdk.Request, didFailToCreateURLRequestWithError error: OderoPaySdk.AFError)
  open func request(_ request: OderoPaySdk.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  open func request(_ request: OderoPaySdk.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: OderoPaySdk.AFError)
  open func request(_ request: OderoPaySdk.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  open func request(_ request: OderoPaySdk.Request, didCreateTask task: Foundation.URLSessionTask)
  open func request(_ request: OderoPaySdk.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  open func request(_ request: OderoPaySdk.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: OderoPaySdk.AFError)
  open func request(_ request: OderoPaySdk.Request, didCompleteTask task: Foundation.URLSessionTask, with error: OderoPaySdk.AFError?)
  open func requestIsRetrying(_ request: OderoPaySdk.Request)
  open func requestDidFinish(_ request: OderoPaySdk.Request)
  open func requestDidResume(_ request: OderoPaySdk.Request)
  public func request(_ request: OderoPaySdk.Request, didResumeTask task: Foundation.URLSessionTask)
  open func requestDidSuspend(_ request: OderoPaySdk.Request)
  public func request(_ request: OderoPaySdk.Request, didSuspendTask task: Foundation.URLSessionTask)
  open func requestDidCancel(_ request: OderoPaySdk.Request)
  public func request(_ request: OderoPaySdk.Request, didCancelTask task: Foundation.URLSessionTask)
  open func request(_ request: OderoPaySdk.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: OderoPaySdk.Request.ValidationResult)
  open func request(_ request: OderoPaySdk.DataRequest, didParseResponse response: OderoPaySdk.DataResponse<Foundation.Data?, OderoPaySdk.AFError>)
  public func request(_ request: OderoPaySdk.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: OderoPaySdk.Request.ValidationResult)
  open func request(_ request: OderoPaySdk.UploadRequest, didCreateUploadable uploadable: OderoPaySdk.UploadRequest.Uploadable)
  open func request(_ request: OderoPaySdk.UploadRequest, didFailToCreateUploadableWithError error: OderoPaySdk.AFError)
  open func request(_ request: OderoPaySdk.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  open func request(_ request: OderoPaySdk.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, OderoPaySdk.AFError>)
  open func request(_ request: OderoPaySdk.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  open func request(_ request: OderoPaySdk.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: OderoPaySdk.Request.ValidationResult)
  open func request(_ request: OderoPaySdk.DownloadRequest, didParseResponse response: OderoPaySdk.DownloadResponse<Foundation.URL?, OderoPaySdk.AFError>)
  @objc deinit
}
@objc public enum Language : Swift.Int {
  case TURKISH
  case ENGLISH
  case RUSSIAN
  case AZERBAIJANI
  case BASE
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol URLConvertible {
  func asURL() throws -> Foundation.URL
}
extension Swift.String : OderoPaySdk.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URL : OderoPaySdk.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URLComponents : OderoPaySdk.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
public protocol URLRequestConvertible {
  func asURLRequest() throws -> Foundation.URLRequest
}
extension OderoPaySdk.URLRequestConvertible {
  public var urlRequest: Foundation.URLRequest? {
    get
  }
}
extension Foundation.URLRequest : OderoPaySdk.URLRequestConvertible {
  public func asURLRequest() throws -> Foundation.URLRequest
}
extension Foundation.URLRequest {
  public init(url: OderoPaySdk.URLConvertible, method: OderoPaySdk.HTTPMethod, headers: OderoPaySdk.HTTPHeaders? = nil) throws
}
@objc @_Concurrency.MainActor(unsafe) final public class PKHUDSystemActivityIndicatorView : OderoPaySdk.PKHUDSquareBaseView, OderoPaySdk.PKHUDAnimating {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc final public func startAnimation()
  @objc deinit
}
extension Foundation.URLSessionConfiguration : OderoPaySdk.AlamofireExtended {
  public typealias ExtendedType = Foundation.URLSessionConfiguration
}
extension OderoPaySdk.AlamofireExtension where ExtendedType : Foundation.URLSessionConfiguration {
  public static var `default`: Foundation.URLSessionConfiguration {
    get
  }
  public static var ephemeral: Foundation.URLSessionConfiguration {
    get
  }
}
public protocol AuthenticationCredential {
  var requiresRefresh: Swift.Bool { get }
}
public protocol Authenticator : AnyObject {
  associatedtype Credential : OderoPaySdk.AuthenticationCredential
  func apply(_ credential: Self.Credential, to urlRequest: inout Foundation.URLRequest)
  func refresh(_ credential: Self.Credential, for session: OderoPaySdk.Session, completion: @escaping (Swift.Result<Self.Credential, Swift.Error>) -> Swift.Void)
  func didRequest(_ urlRequest: Foundation.URLRequest, with response: Foundation.HTTPURLResponse, failDueToAuthenticationError error: Swift.Error) -> Swift.Bool
  func isRequest(_ urlRequest: Foundation.URLRequest, authenticatedWith credential: Self.Credential) -> Swift.Bool
}
public enum AuthenticationError : Swift.Error {
  case missingCredential
  case excessiveRefresh
  public static func == (a: OderoPaySdk.AuthenticationError, b: OderoPaySdk.AuthenticationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class AuthenticationInterceptor<AuthenticatorType> : OderoPaySdk.RequestInterceptor where AuthenticatorType : OderoPaySdk.Authenticator {
  public typealias Credential = AuthenticatorType.Credential
  public struct RefreshWindow {
    public let interval: Foundation.TimeInterval
    public let maximumAttempts: Swift.Int
    public init(interval: Foundation.TimeInterval = 30.0, maximumAttempts: Swift.Int = 5)
  }
  public var credential: OderoPaySdk.AuthenticationInterceptor<AuthenticatorType>.Credential? {
    get
    set
  }
  public init(authenticator: AuthenticatorType, credential: OderoPaySdk.AuthenticationInterceptor<AuthenticatorType>.Credential? = nil, refreshWindow: OderoPaySdk.AuthenticationInterceptor<AuthenticatorType>.RefreshWindow? = RefreshWindow())
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: OderoPaySdk.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  public func retry(_ request: OderoPaySdk.Request, for session: OderoPaySdk.Session, dueTo error: Swift.Error, completion: @escaping (OderoPaySdk.RetryResult) -> Swift.Void)
  @objc deinit
}
public protocol EVReflectable : ObjectiveC.NSObjectProtocol {
  func initValidation(_ dict: Foundation.NSDictionary)
  func propertyMapping() -> [(keyInObject: Swift.String?, keyInResource: Swift.String?)]
  func propertyConverters() -> [(key: Swift.String, decodeConverter: ((Any?) -> ()), encodeConverter: (() -> Any?))]
  func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  func decodePropertyValue(value: Any, key: Swift.String) -> Any?
  func encodePropertyValue(value: Any, key: Swift.String) -> Any
  func getType(_ dict: Foundation.NSDictionary) -> OderoPaySdk.EVReflectable
  func getSpecificType(_ dict: Foundation.NSDictionary) -> OderoPaySdk.EVReflectable?
  func customConverter() -> Swift.AnyObject?
  var evReflectionStatuses: [(OderoPaySdk.DeserializationStatus, Swift.String)] { get set }
}
extension OderoPaySdk.EVReflectable where Self : ObjectiveC.NSObject {
  public var evReflectionStatuses: [(OderoPaySdk.DeserializationStatus, Swift.String)] {
    get
    set
  }
  public init(dictionary: Foundation.NSDictionary, conversionOptions: OderoPaySdk.ConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil)
  public init(json: Swift.String?, conversionOptions: OderoPaySdk.ConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil)
  public init(data: Foundation.Data, conversionOptions: OderoPaySdk.ConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil)
  public init(fileNameInTemp: Swift.String, conversionOptions: OderoPaySdk.ConversionOptions = .DefaultNSCoding)
  public init(fileNameInDocuments: Swift.String, conversionOptions: OderoPaySdk.ConversionOptions = .DefaultNSCoding)
  public init(usingValuesFrom: OderoPaySdk.EVReflectable, conversionOptions: OderoPaySdk.ConversionOptions = .None)
  public var hashValue: Swift.Int {
    get
  }
  public var hash: Swift.Int {
    get
  }
}
extension OderoPaySdk.EVReflectable {
  public static func == (lhs: OderoPaySdk.EVReflectable, rhs: OderoPaySdk.EVReflectable) -> Swift.Bool
  public static func != (lhs: OderoPaySdk.EVReflectable, rhs: OderoPaySdk.EVReflectable) -> Swift.Bool
  public func initValidation(_ dict: Foundation.NSDictionary)
  public func propertyMapping() -> [(keyInObject: Swift.String?, keyInResource: Swift.String?)]
  public func propertyConverters() -> [(key: Swift.String, decodeConverter: ((Any?) -> ()), encodeConverter: (() -> Any?))]
  public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  public func decodePropertyValue(value: Any, key: Swift.String) -> Any?
  public func encodePropertyValue(value: Any, key: Swift.String) -> Any
  public func customConverter() -> Swift.AnyObject?
  public func getType(_ dict: Foundation.NSDictionary) -> OderoPaySdk.EVReflectable
  public func getSpecificType(_ dict: Foundation.NSDictionary) -> OderoPaySdk.EVReflectable?
  @discardableResult
  public func saveToTemp(_ fileName: Swift.String) -> Swift.Bool
  @discardableResult
  public func saveToDocuments(_ fileName: Swift.String) -> Swift.Bool
  public func toDictionary(_ conversionOptions: OderoPaySdk.ConversionOptions = .DefaultSerialize) -> Foundation.NSDictionary
  public func toJsonString(_ conversionOptions: OderoPaySdk.ConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = false) -> Swift.String
  public func toJsonData(_ conversionOptions: OderoPaySdk.ConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = false) -> Foundation.Data
  public static func arrayFromJson<T>(_ json: Swift.String?, conversionOptions: OderoPaySdk.ConversionOptions = .DefaultDeserialize) -> [T] where T : ObjectiveC.NSObject
  public func mapObjectTo<T>(_ conversionOptions: OderoPaySdk.ConversionOptions = .DefaultDeserialize) -> T where T : ObjectiveC.NSObject
  public func typeForKey(_ propertyName: Swift.String) -> Any.Type?
  public func convertDictionary(_ key: Swift.String, dict: Any) -> Foundation.NSDictionary
  public func initMayNotContainKeys(_ keys: [Swift.String], dict: Foundation.NSDictionary)
  public func initMustContainKeys(_ keys: [Swift.String], dict: Foundation.NSDictionary)
  public func evReflectionStatus() -> OderoPaySdk.DeserializationStatus
  public func addStatusMessage(_ type: OderoPaySdk.DeserializationStatus, message: Swift.String)
}
public enum PaymentPhase : Swift.String, Swift.Codable {
  case AUTH
  case PRE_AUTH
  case POST_AUTH
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol EVGenericsKVC {
  func setGenericValue(_ value: Swift.AnyObject!, forUndefinedKey key: Swift.String)
  func getGenericType() -> ObjectiveC.NSObject
}
public protocol EVRaw {
  var anyRawValue: Any { get }
}
extension OderoPaySdk.EVRaw where Self : Swift.RawRepresentable {
  public var anyRawValue: Any {
    get
  }
}
public protocol EVArrayConvertable {
  func convertArray(_ key: Swift.String, array: Any) -> Foundation.NSArray
}
public protocol EVAssociated {
}
extension OderoPaySdk.EVAssociated {
  public var associated: (label: Swift.String, value: Any?, values: [Any]) {
    get
  }
}
extension Swift.Dictionary {
  public init<T>(associated: [T]?) where T : OderoPaySdk.EVAssociated
}
@objc @_inheritsConvenienceInitializers @objcMembers open class EVObject : ObjectiveC.NSObject, Foundation.NSCoding, OderoPaySdk.EVReflectable {
  @objc override dynamic open func setValue(_ value: Any!, forUndefinedKey key: Swift.String)
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc override dynamic open var debugDescription: Swift.String {
    @objc get
  }
  @objc required override dynamic public init()
  @objc convenience required public init?(coder: Foundation.NSCoder)
  @objc open func encode(with aCoder: Foundation.NSCoder)
  @objc open func initValidation(_ dict: Foundation.NSDictionary)
  open func propertyMapping() -> [(keyInObject: Swift.String?, keyInResource: Swift.String?)]
  open func propertyConverters() -> [(key: Swift.String, decodeConverter: ((Any?) -> ()), encodeConverter: (() -> Any?))]
  @objc open func decodePropertyValue(value: Any, key: Swift.String) -> Any?
  @objc open func encodePropertyValue(value: Any, key: Swift.String) -> Any
  @objc open func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  open func getSpecificType(_ dict: Foundation.NSDictionary) -> OderoPaySdk.EVReflectable?
  @objc open func customConverter() -> Swift.AnyObject?
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class PKHUDProgressView : OderoPaySdk.PKHUDSquareBaseView, OderoPaySdk.PKHUDAnimating {
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String? = nil, subtitle: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc public func startAnimation()
  @_Concurrency.MainActor(unsafe) @objc public func stopAnimation()
  @objc deinit
}
extension UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
}
public typealias AFDataResponse<Success> = OderoPaySdk.DataResponse<Success, OderoPaySdk.AFError>
public typealias AFDownloadResponse<Success> = OderoPaySdk.DownloadResponse<Success, OderoPaySdk.AFError>
public struct DataResponse<Success, Failure> where Failure : Swift.Error {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let metrics: Foundation.URLSessionTaskMetrics?
  public let serializationDuration: Foundation.TimeInterval
  public let result: Swift.Result<Success, Failure>
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, metrics: Foundation.URLSessionTaskMetrics?, serializationDuration: Foundation.TimeInterval, result: Swift.Result<Success, Failure>)
}
extension OderoPaySdk.DataResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension OderoPaySdk.DataResponse {
  public func map<NewSuccess>(_ transform: (Success) -> NewSuccess) -> OderoPaySdk.DataResponse<NewSuccess, Failure>
  public func tryMap<NewSuccess>(_ transform: (Success) throws -> NewSuccess) -> OderoPaySdk.DataResponse<NewSuccess, Swift.Error>
  public func mapError<NewFailure>(_ transform: (Failure) -> NewFailure) -> OderoPaySdk.DataResponse<Success, NewFailure> where NewFailure : Swift.Error
  public func tryMapError<NewFailure>(_ transform: (Failure) throws -> NewFailure) -> OderoPaySdk.DataResponse<Success, Swift.Error> where NewFailure : Swift.Error
}
public struct DownloadResponse<Success, Failure> where Failure : Swift.Error {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let fileURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let metrics: Foundation.URLSessionTaskMetrics?
  public let serializationDuration: Foundation.TimeInterval
  public let result: Swift.Result<Success, Failure>
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, resumeData: Foundation.Data?, metrics: Foundation.URLSessionTaskMetrics?, serializationDuration: Foundation.TimeInterval, result: Swift.Result<Success, Failure>)
}
extension OderoPaySdk.DownloadResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension OderoPaySdk.DownloadResponse {
  public func map<NewSuccess>(_ transform: (Success) -> NewSuccess) -> OderoPaySdk.DownloadResponse<NewSuccess, Failure>
  public func tryMap<NewSuccess>(_ transform: (Success) throws -> NewSuccess) -> OderoPaySdk.DownloadResponse<NewSuccess, Swift.Error>
  public func mapError<NewFailure>(_ transform: (Failure) -> NewFailure) -> OderoPaySdk.DownloadResponse<Success, NewFailure> where NewFailure : Swift.Error
  public func tryMapError<NewFailure>(_ transform: (Failure) throws -> NewFailure) -> OderoPaySdk.DownloadResponse<Success, Swift.Error> where NewFailure : Swift.Error
}
extension Swift.Array where Element : ObjectiveC.NSObject {
  public init(json: Swift.String?, conversionOptions: OderoPaySdk.ConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil)
  public init(data: Foundation.Data?, conversionOptions: OderoPaySdk.ConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil)
  public init(dictionaryArray: [Foundation.NSDictionary], conversionOptions: OderoPaySdk.ConversionOptions = .DefaultDeserialize)
  public init(dictionary: Foundation.NSDictionary, forKeyPath: Swift.String, conversionOptions: OderoPaySdk.ConversionOptions = .DefaultDeserialize)
  public func getArrayTypeInstance<T>(_ arr: Swift.Array<T>) -> T where T : ObjectiveC.NSObject
  public func getTypeInstance<T>() -> T where T : ObjectiveC.NSObject
  public func getTypeAsString() -> Swift.String
}
extension Swift.Array where Element : OderoPaySdk.EVReflectable {
  public func toJsonString(_ conversionOptions: OderoPaySdk.ConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = false) -> Swift.String
  public func toJsonData(_ conversionOptions: OderoPaySdk.ConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = false, encoding: Swift.String.Encoding = .utf8) -> Foundation.Data
  public func toDictionaryArray(_ conversionOptions: OderoPaySdk.ConversionOptions = .DefaultSerialize) -> Foundation.NSArray
}
extension Swift.Array where Element : Foundation.NSDictionary {
  public init(jsonArray: Swift.String)
  public init(dataArray: Foundation.Data)
  public func toJsonStringArray(prettyPrinted: Swift.Bool = false) -> Swift.String
}
extension Foundation.NSArray {
  public func nestedArrayMap<T>(_ element: (Foundation.NSDictionary) -> T) -> [[T]]
  public func doubleNestedArrayMap<T>(_ element: (Foundation.NSDictionary) -> T) -> [[[T]]]
  public func tripleNestedArrayMap<T>(_ element: (Foundation.NSDictionary) -> T) -> [[[[T]]]]
  public func quadrupleNestedArrayMap<T>(_ element: (Foundation.NSDictionary) -> T) -> [[[[[T]]]]]
  public func quintupleNestedArrayMap<T>(_ element: (Foundation.NSDictionary) -> T) -> [[[[[[T]]]]]]
  public func sextupleNestedArrayMap<T>(_ element: (Foundation.NSDictionary) -> T) -> [[[[[[[T]]]]]]]
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PKHUDRotatingImageView : OderoPaySdk.PKHUDSquareBaseView, OderoPaySdk.PKHUDAnimating {
  @_Concurrency.MainActor(unsafe) @objc public func startAnimation()
  @_Concurrency.MainActor(unsafe) @objc public func stopAnimation()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override public init(image: UIKit.UIImage? = nil, title: Swift.String? = nil, subtitle: Swift.String? = nil)
  @objc deinit
}
open class RetryPolicy : OderoPaySdk.RequestInterceptor {
  public static let defaultRetryLimit: Swift.UInt
  public static let defaultExponentialBackoffBase: Swift.UInt
  public static let defaultExponentialBackoffScale: Swift.Double
  public static let defaultRetryableHTTPMethods: Swift.Set<OderoPaySdk.HTTPMethod>
  public static let defaultRetryableHTTPStatusCodes: Swift.Set<Swift.Int>
  public static let defaultRetryableURLErrorCodes: Swift.Set<Foundation.URLError.Code>
  final public let retryLimit: Swift.UInt
  final public let exponentialBackoffBase: Swift.UInt
  final public let exponentialBackoffScale: Swift.Double
  final public let retryableHTTPMethods: Swift.Set<OderoPaySdk.HTTPMethod>
  final public let retryableHTTPStatusCodes: Swift.Set<Swift.Int>
  final public let retryableURLErrorCodes: Swift.Set<Foundation.URLError.Code>
  public init(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<OderoPaySdk.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods, retryableHTTPStatusCodes: Swift.Set<Swift.Int> = RetryPolicy.defaultRetryableHTTPStatusCodes, retryableURLErrorCodes: Swift.Set<Foundation.URLError.Code> = RetryPolicy.defaultRetryableURLErrorCodes)
  open func retry(_ request: OderoPaySdk.Request, for session: OderoPaySdk.Session, dueTo error: Swift.Error, completion: @escaping (OderoPaySdk.RetryResult) -> Swift.Void)
  open func shouldRetry(request: OderoPaySdk.Request, dueTo error: Swift.Error) -> Swift.Bool
  @objc deinit
}
extension OderoPaySdk.RequestInterceptor where Self == OderoPaySdk.RetryPolicy {
  public static var retryPolicy: OderoPaySdk.RetryPolicy {
    get
  }
  public static func retryPolicy(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<OderoPaySdk.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods, retryableHTTPStatusCodes: Swift.Set<Swift.Int> = RetryPolicy.defaultRetryableHTTPStatusCodes, retryableURLErrorCodes: Swift.Set<Foundation.URLError.Code> = RetryPolicy.defaultRetryableURLErrorCodes) -> OderoPaySdk.RetryPolicy
}
open class ConnectionLostRetryPolicy : OderoPaySdk.RetryPolicy {
  public init(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<OderoPaySdk.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods)
  @objc deinit
}
extension OderoPaySdk.RequestInterceptor where Self == OderoPaySdk.ConnectionLostRetryPolicy {
  public static var connectionLostRetryPolicy: OderoPaySdk.ConnectionLostRetryPolicy {
    get
  }
  public static func connectionLostRetryPolicy(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<OderoPaySdk.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods) -> OderoPaySdk.ConnectionLostRetryPolicy
}
@objc @_inheritsConvenienceInitializers open class PKHUD : ObjectiveC.NSObject {
  public var viewToPresentOn: UIKit.UIView?
  public typealias TimerAction = (Swift.Bool) -> Swift.Void
  @available(*, deprecated, message: "Will be removed with Swift4 support, use gracePeriod instead")
  public var graceTime: Foundation.TimeInterval {
    get
    set(newPeriod)
  }
  public var gracePeriod: Swift.Double
  open class var sharedHUD: OderoPaySdk.PKHUD {
    get
  }
  @objc override dynamic public init()
  convenience public init(viewToPresentOn view: UIKit.UIView)
  @objc deinit
  open var dimsBackground: Swift.Bool
  open var userInteractionOnUnderlyingViewsEnabled: Swift.Bool {
    get
    set
  }
  open var isVisible: Swift.Bool {
    get
  }
  open var contentView: UIKit.UIView {
    get
    set
  }
  open var effect: UIKit.UIVisualEffect? {
    get
    set
  }
  open var leadingMargin: CoreFoundation.CGFloat
  open var trailingMargin: CoreFoundation.CGFloat
  open func show(onView view: UIKit.UIView? = nil)
  open func hide(animated anim: Swift.Bool = true, completion: OderoPaySdk.PKHUD.TimerAction? = nil)
  open func hide(_ animated: Swift.Bool, completion: OderoPaySdk.PKHUD.TimerAction? = nil)
  open func hide(afterDelay delay: Foundation.TimeInterval, completion: OderoPaySdk.PKHUD.TimerAction? = nil)
}
extension Foundation.URLRequest {
  public var method: OderoPaySdk.HTTPMethod? {
    get
    set
  }
  public func validate() throws
}
@objc public enum Environment : Swift.Int {
  case SANDBOX_TR
  case SANDBOX_AZ
  case PROD_TR
  case PROD_AZ
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol OderoPayLibrary {
  @objc func startPayment(navigationController: UIKit.UINavigationController?, token: Swift.String?, delegate: OderoPaySdk.OderoPayResultListener?) throws
  @objc func isInitialized() -> Swift.Bool
  @objc func forceLanguage(language: OderoPaySdk.Language)
}
open class ServerTrustManager {
  final public let allHostsMustBeEvaluated: Swift.Bool
  final public let evaluators: [Swift.String : OderoPaySdk.ServerTrustEvaluating]
  public init(allHostsMustBeEvaluated: Swift.Bool = true, evaluators: [Swift.String : OderoPaySdk.ServerTrustEvaluating])
  open func serverTrustEvaluator(forHost host: Swift.String) throws -> OderoPaySdk.ServerTrustEvaluating?
  @objc deinit
}
public protocol ServerTrustEvaluating {
  func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
}
final public class DefaultTrustEvaluator : OderoPaySdk.ServerTrustEvaluating {
  public init(validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class RevocationTrustEvaluator : OderoPaySdk.ServerTrustEvaluating {
  public struct Options : Swift.OptionSet {
    public static let crl: OderoPaySdk.RevocationTrustEvaluator.Options
    public static let networkAccessDisabled: OderoPaySdk.RevocationTrustEvaluator.Options
    public static let ocsp: OderoPaySdk.RevocationTrustEvaluator.Options
    public static let preferCRL: OderoPaySdk.RevocationTrustEvaluator.Options
    public static let requirePositiveResponse: OderoPaySdk.RevocationTrustEvaluator.Options
    public static let any: OderoPaySdk.RevocationTrustEvaluator.Options
    public let rawValue: CoreFoundation.CFOptionFlags
    public init(rawValue: CoreFoundation.CFOptionFlags)
    public typealias ArrayLiteralElement = OderoPaySdk.RevocationTrustEvaluator.Options
    public typealias Element = OderoPaySdk.RevocationTrustEvaluator.Options
    public typealias RawValue = CoreFoundation.CFOptionFlags
  }
  public init(performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true, options: OderoPaySdk.RevocationTrustEvaluator.Options = .any)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension OderoPaySdk.ServerTrustEvaluating where Self == OderoPaySdk.RevocationTrustEvaluator {
  public static var revocationChecking: OderoPaySdk.RevocationTrustEvaluator {
    get
  }
  public static func revocationChecking(performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true, options: OderoPaySdk.RevocationTrustEvaluator.Options = .any) -> OderoPaySdk.RevocationTrustEvaluator
}
final public class PinnedCertificatesTrustEvaluator : OderoPaySdk.ServerTrustEvaluating {
  public init(certificates: [Security.SecCertificate] = Bundle.main.af.certificates, acceptSelfSignedCertificates: Swift.Bool = false, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension OderoPaySdk.ServerTrustEvaluating where Self == OderoPaySdk.PinnedCertificatesTrustEvaluator {
  public static var pinnedCertificates: OderoPaySdk.PinnedCertificatesTrustEvaluator {
    get
  }
  public static func pinnedCertificates(certificates: [Security.SecCertificate] = Bundle.main.af.certificates, acceptSelfSignedCertificates: Swift.Bool = false, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true) -> OderoPaySdk.PinnedCertificatesTrustEvaluator
}
final public class PublicKeysTrustEvaluator : OderoPaySdk.ServerTrustEvaluating {
  public init(keys: [Security.SecKey] = Bundle.main.af.publicKeys, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension OderoPaySdk.ServerTrustEvaluating where Self == OderoPaySdk.PublicKeysTrustEvaluator {
  public static var publicKeys: OderoPaySdk.PublicKeysTrustEvaluator {
    get
  }
  public static func publicKeys(keys: [Security.SecKey] = Bundle.main.af.publicKeys, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true) -> OderoPaySdk.PublicKeysTrustEvaluator
}
final public class CompositeTrustEvaluator : OderoPaySdk.ServerTrustEvaluating {
  public init(evaluators: [OderoPaySdk.ServerTrustEvaluating])
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension OderoPaySdk.ServerTrustEvaluating where Self == OderoPaySdk.CompositeTrustEvaluator {
  public static func composite(evaluators: [OderoPaySdk.ServerTrustEvaluating]) -> OderoPaySdk.CompositeTrustEvaluator
}
@available(*, deprecated, renamed: "DisabledTrustEvaluator", message: "DisabledEvaluator has been renamed DisabledTrustEvaluator.")
public typealias DisabledEvaluator = OderoPaySdk.DisabledTrustEvaluator
final public class DisabledTrustEvaluator : OderoPaySdk.ServerTrustEvaluating {
  public init()
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension Swift.Array where Element == OderoPaySdk.ServerTrustEvaluating {
  public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
}
extension Foundation.Bundle : OderoPaySdk.AlamofireExtended {
  public typealias ExtendedType = Foundation.Bundle
}
extension OderoPaySdk.AlamofireExtension where ExtendedType : Foundation.Bundle {
  public var certificates: [Security.SecCertificate] {
    get
  }
  public var publicKeys: [Security.SecKey] {
    get
  }
  public func paths(forResourcesOfTypes types: [Swift.String]) -> [Swift.String]
}
extension Security.SecTrust : OderoPaySdk.AlamofireExtended {
  public typealias ExtendedType = Security.SecTrust
}
extension OderoPaySdk.AlamofireExtension where ExtendedType == Security.SecTrust {
  @available(iOS 12, macOS 10.14, tvOS 12, watchOS 5, *)
  public func evaluate(afterApplying policy: Security.SecPolicy) throws
  @available(iOS, introduced: 10, deprecated: 12, renamed: "evaluate(afterApplying:)")
  @available(macOS, introduced: 10.12, deprecated: 10.14, renamed: "evaluate(afterApplying:)")
  @available(tvOS, introduced: 10, deprecated: 12, renamed: "evaluate(afterApplying:)")
  @available(watchOS, introduced: 3, deprecated: 5, renamed: "evaluate(afterApplying:)")
  public func validate(policy: Security.SecPolicy, errorProducer: (_ status: Darwin.OSStatus, _ result: Security.SecTrustResultType) -> Swift.Error) throws
  public func apply(policy: Security.SecPolicy) throws -> Security.SecTrust
  @available(iOS 12, macOS 10.14, tvOS 12, watchOS 5, *)
  public func evaluate() throws
  @available(iOS, introduced: 10, deprecated: 12, renamed: "evaluate()")
  @available(macOS, introduced: 10.12, deprecated: 10.14, renamed: "evaluate()")
  @available(tvOS, introduced: 10, deprecated: 12, renamed: "evaluate()")
  @available(watchOS, introduced: 3, deprecated: 5, renamed: "evaluate()")
  public func validate(errorProducer: (_ status: Darwin.OSStatus, _ result: Security.SecTrustResultType) -> Swift.Error) throws
  public func setAnchorCertificates(_ certificates: [Security.SecCertificate]) throws
  public var publicKeys: [Security.SecKey] {
    get
  }
  public var certificates: [Security.SecCertificate] {
    get
  }
  public var certificateData: [Foundation.Data] {
    get
  }
  public func performDefaultValidation(forHost host: Swift.String) throws
  public func performValidation(forHost host: Swift.String) throws
}
extension Security.SecPolicy : OderoPaySdk.AlamofireExtended {
  public typealias ExtendedType = Security.SecPolicy
}
extension OderoPaySdk.AlamofireExtension where ExtendedType == Security.SecPolicy {
  public static let `default`: Security.SecPolicy
  public static func hostname(_ hostname: Swift.String) -> Security.SecPolicy
  public static func revocation(options: OderoPaySdk.RevocationTrustEvaluator.Options) throws -> Security.SecPolicy
}
extension Swift.Array : OderoPaySdk.AlamofireExtended {
  public typealias ExtendedType = Swift.Array<Element>
}
extension OderoPaySdk.AlamofireExtension where ExtendedType == [Security.SecCertificate] {
  public var data: [Foundation.Data] {
    get
  }
  public var publicKeys: [Security.SecKey] {
    get
  }
}
extension Security.SecCertificate : OderoPaySdk.AlamofireExtended {
  public typealias ExtendedType = Security.SecCertificate
}
extension OderoPaySdk.AlamofireExtension where ExtendedType == Security.SecCertificate {
  public var publicKey: Security.SecKey? {
    get
  }
}
extension Swift.Int32 : OderoPaySdk.AlamofireExtended {
  public typealias ExtendedType = Swift.Int32
}
extension OderoPaySdk.AlamofireExtension where ExtendedType == Swift.Int32 {
  public var isSuccess: Swift.Bool {
    get
  }
}
extension Security.SecTrustResultType : OderoPaySdk.AlamofireExtended {
  public typealias ExtendedType = Security.SecTrustResultType
}
extension OderoPaySdk.AlamofireExtension where ExtendedType == Security.SecTrustResultType {
  public var isSuccess: Swift.Bool {
    get
  }
}
public typealias AFResult<Success> = Swift.Result<Success, OderoPaySdk.AFError>
public struct PrintOptions : Swift.OptionSet, Swift.CustomStringConvertible {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let None: OderoPaySdk.PrintOptions
  public static let UnknownKeypath: OderoPaySdk.PrintOptions
  public static let IncorrectKey: OderoPaySdk.PrintOptions
  public static let ShouldExtendNSObject: OderoPaySdk.PrintOptions
  public static let IsInvalidJson: OderoPaySdk.PrintOptions
  public static let MissingProtocol: OderoPaySdk.PrintOptions
  public static let MissingKey: OderoPaySdk.PrintOptions
  public static let InvalidType: OderoPaySdk.PrintOptions
  public static let InvalidValue: OderoPaySdk.PrintOptions
  public static let InvalidClass: OderoPaySdk.PrintOptions
  public static let EnumWithoutAssociatedValue: OderoPaySdk.PrintOptions
  public static let UseWorkaround: OderoPaySdk.PrintOptions
  public static var All: OderoPaySdk.PrintOptions
  public static var Active: OderoPaySdk.PrintOptions
  public var description: Swift.String {
    get
  }
  public typealias ArrayLiteralElement = OderoPaySdk.PrintOptions
  public typealias Element = OderoPaySdk.PrintOptions
  public typealias RawValue = Swift.Int
}
public func evPrint(_ options: OderoPaySdk.PrintOptions, _ value: Swift.String)
public enum PaymentType : Swift.String, Swift.Codable {
  case PRODUCT
  case LISTING
  case SUBSCRIPTION
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc open class SessionDelegate : ObjectiveC.NSObject {
  public init(fileManager: Foundation.FileManager = .default)
  @objc deinit
}
extension OderoPaySdk.SessionDelegate : Foundation.URLSessionDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
}
extension OderoPaySdk.SessionDelegate : Foundation.URLSessionTaskDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, needNewBodyStream completionHandler: @escaping (Foundation.InputStream?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
}
extension OderoPaySdk.SessionDelegate : Foundation.URLSessionDataDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse, completionHandler: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
extension OderoPaySdk.SessionDelegate : Foundation.URLSessionDownloadDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
}
public struct HTTPMethod : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
  public static let connect: OderoPaySdk.HTTPMethod
  public static let delete: OderoPaySdk.HTTPMethod
  public static let get: OderoPaySdk.HTTPMethod
  public static let head: OderoPaySdk.HTTPMethod
  public static let options: OderoPaySdk.HTTPMethod
  public static let patch: OderoPaySdk.HTTPMethod
  public static let post: OderoPaySdk.HTTPMethod
  public static let put: OderoPaySdk.HTTPMethod
  public static let query: OderoPaySdk.HTTPMethod
  public static let trace: OderoPaySdk.HTTPMethod
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
@_hasMissingDesignatedInitializers open class NetworkReachabilityManager {
  public enum NetworkReachabilityStatus {
    case unknown
    case notReachable
    case reachable(OderoPaySdk.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType)
    public enum ConnectionType {
      case ethernetOrWiFi
      case cellular
      public static func == (a: OderoPaySdk.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType, b: OderoPaySdk.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public typealias Listener = (OderoPaySdk.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Void
  public static let `default`: OderoPaySdk.NetworkReachabilityManager?
  open var isReachable: Swift.Bool {
    get
  }
  open var isReachableOnCellular: Swift.Bool {
    get
  }
  open var isReachableOnEthernetOrWiFi: Swift.Bool {
    get
  }
  final public let reachabilityQueue: Dispatch.DispatchQueue
  open var flags: SystemConfiguration.SCNetworkReachabilityFlags? {
    get
  }
  open var status: OderoPaySdk.NetworkReachabilityManager.NetworkReachabilityStatus {
    get
  }
  convenience public init?(host: Swift.String)
  convenience public init?()
  @objc deinit
  @discardableResult
  open func startListening(onQueue queue: Dispatch.DispatchQueue = .main, onUpdatePerforming listener: @escaping OderoPaySdk.NetworkReachabilityManager.Listener) -> Swift.Bool
  open func stopListening()
}
extension OderoPaySdk.NetworkReachabilityManager.NetworkReachabilityStatus : Swift.Equatable {
  public static func == (a: OderoPaySdk.NetworkReachabilityManager.NetworkReachabilityStatus, b: OderoPaySdk.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Bool
}
@objc public protocol OderoPayButtonCustomizer {
  @objc func setStrokeWidthAndColor(width: Swift.Float, color: Swift.Int)
  @objc func setSize(width: Swift.Int, height: Swift.Int)
  @objc func setRoundness(radius: Swift.Float)
}
public enum Installment : Swift.Int, Swift.Codable {
  case single
  case double
  case triple
  case quadruple
  case quintaple
  case sextuple
  case septuple
  case octople
  case nonuple
  case decuple
  case undecuple
  case dozen
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol EVCustomReflectable {
  static func constructWith(value: Any?) -> OderoPaySdk.EVCustomReflectable?
  func constructWith(value: Any?) -> OderoPaySdk.EVCustomReflectable?
  func toCodableValue() -> Any
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class OderoPayButtonView : UIKit.UIView, SafariServices.SFSafariViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) public func initNavigationController(named navigationController: UIKit.UINavigationController)
  @_Concurrency.MainActor(unsafe) public func setOderoPayImageSize(height: CoreFoundation.CGFloat, width: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func changeDefaultColor(fromWhiteToBlack value: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func addOderoPayButtonOutline(colored color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func removeOderoPayButtonOutline()
  @objc deinit
}
public enum PaymentMethod : Swift.String, Swift.Codable {
  case CARD_PAYMENT
  case MULTI_CARD_PAYMENT
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DataResponsePublisher<Value> : Combine.Publisher {
  public typealias Output = OderoPaySdk.DataResponse<Value, OderoPaySdk.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: OderoPaySdk.DataRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : OderoPaySdk.ResponseSerializer
  public init<Serializer>(_ request: OderoPaySdk.DataRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : OderoPaySdk.DataResponseSerializerProtocol
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, OderoPaySdk.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, OderoPaySdk.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == OderoPaySdk.DataResponse<Value, OderoPaySdk.AFError>
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension OderoPaySdk.DataResponsePublisher where Value == Foundation.Data? {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init(_ request: OderoPaySdk.DataRequest, queue: Dispatch.DispatchQueue)
}
extension OderoPaySdk.DataRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> OderoPaySdk.DataResponsePublisher<T> where Serializer : OderoPaySdk.ResponseSerializer, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishData(queue: Dispatch.DispatchQueue = .main, preprocessor: OderoPaySdk.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> OderoPaySdk.DataResponsePublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishString(queue: Dispatch.DispatchQueue = .main, preprocessor: OderoPaySdk.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> OderoPaySdk.DataResponsePublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  @available(*, deprecated, message: "Renamed publishDecodable(type:queue:preprocessor:decoder:emptyResponseCodes:emptyRequestMethods).")
  @_disfavoredOverload public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: OderoPaySdk.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: OderoPaySdk.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyResponseMethods: Swift.Set<OderoPaySdk.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> OderoPaySdk.DataResponsePublisher<T> where T : Swift.Decodable
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: OderoPaySdk.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: OderoPaySdk.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> OderoPaySdk.DataResponsePublisher<T> where T : Swift.Decodable
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishUnserialized(queue: Dispatch.DispatchQueue = .main) -> OderoPaySdk.DataResponsePublisher<Foundation.Data?>
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DataStreamPublisher<Value> : Combine.Publisher {
  public typealias Output = OderoPaySdk.DataStreamRequest.Stream<Value, OderoPaySdk.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: OderoPaySdk.DataStreamRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : OderoPaySdk.DataStreamSerializer
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, OderoPaySdk.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, OderoPaySdk.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == OderoPaySdk.DataStreamRequest.Stream<Value, OderoPaySdk.AFError>
}
extension OderoPaySdk.DataStreamRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishStream<Serializer>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> OderoPaySdk.DataStreamPublisher<Serializer.SerializedObject> where Serializer : OderoPaySdk.DataStreamSerializer
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishData(queue: Dispatch.DispatchQueue = .main) -> OderoPaySdk.DataStreamPublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishString(queue: Dispatch.DispatchQueue = .main) -> OderoPaySdk.DataStreamPublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, decoder: OderoPaySdk.DataDecoder = JSONDecoder(), preprocessor: OderoPaySdk.DataPreprocessor = PassthroughPreprocessor()) -> OderoPaySdk.DataStreamPublisher<T> where T : Swift.Decodable
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DownloadResponsePublisher<Value> : Combine.Publisher {
  public typealias Output = OderoPaySdk.DownloadResponse<Value, OderoPaySdk.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: OderoPaySdk.DownloadRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : OderoPaySdk.ResponseSerializer
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init<Serializer>(_ request: OderoPaySdk.DownloadRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : OderoPaySdk.DownloadResponseSerializerProtocol
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, OderoPaySdk.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, OderoPaySdk.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == OderoPaySdk.DownloadResponse<Value, OderoPaySdk.AFError>
}
extension OderoPaySdk.DownloadRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> OderoPaySdk.DownloadResponsePublisher<T> where Serializer : OderoPaySdk.ResponseSerializer, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> OderoPaySdk.DownloadResponsePublisher<T> where Serializer : OderoPaySdk.DownloadResponseSerializerProtocol, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishURL(queue: Dispatch.DispatchQueue = .main) -> OderoPaySdk.DownloadResponsePublisher<Foundation.URL>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishData(queue: Dispatch.DispatchQueue = .main, preprocessor: OderoPaySdk.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> OderoPaySdk.DownloadResponsePublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishString(queue: Dispatch.DispatchQueue = .main, preprocessor: OderoPaySdk.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> OderoPaySdk.DownloadResponsePublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  @available(*, deprecated, message: "Renamed publishDecodable(type:queue:preprocessor:decoder:emptyResponseCodes:emptyRequestMethods).")
  @_disfavoredOverload public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: OderoPaySdk.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: OderoPaySdk.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyResponseMethods: Swift.Set<OderoPaySdk.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> OderoPaySdk.DownloadResponsePublisher<T> where T : Swift.Decodable
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: OderoPaySdk.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: OderoPaySdk.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> OderoPaySdk.DownloadResponsePublisher<T> where T : Swift.Decodable
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension OderoPaySdk.DownloadResponsePublisher where Value == Foundation.URL? {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init(_ request: OderoPaySdk.DownloadRequest, queue: Dispatch.DispatchQueue)
}
extension OderoPaySdk.DownloadRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishUnserialized(on queue: Dispatch.DispatchQueue = .main) -> OderoPaySdk.DownloadResponsePublisher<Foundation.URL?>
}
@_hasMissingDesignatedInitializers final public class EVReflection {
  final public class func fromDictionary(_ dictionary: Foundation.NSDictionary, anyobjectTypeString: Swift.String, conversionOptions: OderoPaySdk.ConversionOptions = .DefaultDeserialize) -> ObjectiveC.NSObject?
  @discardableResult
  final public class func setPropertiesfromDictionary<T>(_ dictionary: Foundation.NSDictionary, anyObject: T, conversionOptions: OderoPaySdk.ConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil) -> T where T : ObjectiveC.NSObject
  final public class func getValue(_ fromObject: ObjectiveC.NSObject, key: Swift.String) -> Any?
  final public class func toDictionary(_ theObject: ObjectiveC.NSObject, conversionOptions: OderoPaySdk.ConversionOptions = .DefaultSerialize, isCachable: Swift.Bool = false, parents: [ObjectiveC.NSObject] = []) -> (Foundation.NSDictionary, Foundation.NSDictionary)
  final public class func dictionaryFromJson(_ json: Swift.String?) -> Foundation.NSDictionary
  final public class func dictionaryArrayFromJson(_ json: Swift.String?) -> [Foundation.NSDictionary]
  final public class func arrayFromData<T>(_ theObject: ObjectiveC.NSObject? = nil, type: T, data: Foundation.Data?, conversionOptions: OderoPaySdk.ConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil) -> [T]
  final public class func arrayFromJson<T>(type: T, json: Swift.String?, conversionOptions: OderoPaySdk.ConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil) -> [T]
  final public class func toJsonString(_ theObject: ObjectiveC.NSObject, conversionOptions: OderoPaySdk.ConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = false) -> Swift.String
  final public class func toJsonData(_ theObject: ObjectiveC.NSObject, conversionOptions: OderoPaySdk.ConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = false) -> Foundation.Data
  final public class func logObject(_ theObject: OderoPaySdk.EVReflectable, prettyPrinted: Swift.Bool = true)
  final public class func description(_ theObject: OderoPaySdk.EVReflectable, conversionOptions: OderoPaySdk.ConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = true) -> Swift.String
  final public class func hashValue(_ theObject: ObjectiveC.NSObject) -> Swift.Int
  final public class func encodeWithCoder(_ theObject: ObjectiveC.NSObject, aCoder: Foundation.NSCoder, conversionOptions: OderoPaySdk.ConversionOptions = .DefaultNSCoding)
  final public class func decodeObjectWithCoder(_ theObject: ObjectiveC.NSObject, aDecoder: Foundation.NSCoder, conversionOptions: OderoPaySdk.ConversionOptions = .DefaultNSCoding)
  final public class func areEqual(_ lhs: ObjectiveC.NSObject, rhs: ObjectiveC.NSObject) -> Swift.Bool
  final public class func dictionariesAreEqual(_ lhsdict: Foundation.NSDictionary, rhsdict: Foundation.NSDictionary) -> Swift.Bool
  final public class func getCleanAppName(_ forObject: ObjectiveC.NSObject? = nil) -> Swift.String
  final public class func getCleanAppName(_ aClass: Swift.AnyClass?) -> Swift.String
  final public class func setBundleIdentifier(_ forClass: Swift.AnyClass)
  final public class func setBundleIdentifier(_ identifier: Swift.String)
  final public class func setBundleIdentifiers(_ classes: Swift.Array<Swift.AnyClass>)
  final public class func setBundleIdentifiers(_ identifiers: Swift.Array<Swift.String>)
  final public class func setDateFormatter(_ formatter: Foundation.DateFormatter?)
  final public class func swiftClassTypeFromString(_ className: Swift.String) -> Swift.AnyClass?
  final public class func swiftClassFromString(_ className: Swift.String) -> ObjectiveC.NSObject?
  final public class func swiftStringFromClass(_ theObject: ObjectiveC.NSObject) -> Swift.String
  final public class func swiftStringFromClass(_ aClass: Swift.AnyClass) -> Swift.String
  final public class func valueForAny(_ parentObject: Any? = nil, key: Swift.String? = nil, anyValue: Any, conversionOptions: OderoPaySdk.ConversionOptions = .DefaultDeserialize, isCachable: Swift.Bool = false, parents: [ObjectiveC.NSObject] = []) -> (value: Swift.AnyObject, type: Swift.String, isObject: Swift.Bool)
  final public class func convertToInternalSwiftRepresentation(type: Swift.String) -> Swift.String
  final public class func valueForAnyDetail(_ parentObject: Any? = nil, key: Swift.String? = nil, theValue: Any, valueType: Swift.String) -> (value: Swift.AnyObject, type: Swift.String, isObject: Swift.Bool)
  public static func setObjectValue<T>(_ anyObject: T, key: Swift.String, theValue: Any?, typeInObject: Swift.String? = nil, valid: Swift.Bool, conversionOptions: OderoPaySdk.ConversionOptions = .DefaultDeserialize, parents: [ObjectiveC.NSObject] = []) where T : ObjectiveC.NSObject
  @objc deinit
}
extension Foundation.Date {
  public init?(fromDateTimeString: Swift.String)
}
@objc @_inheritsConvenienceInitializers open class PKHUDAssets : ObjectiveC.NSObject {
  open class var crossImage: UIKit.UIImage {
    get
  }
  open class var checkmarkImage: UIKit.UIImage {
    get
  }
  open class var progressActivityImage: UIKit.UIImage {
    get
  }
  open class var progressCircularImage: UIKit.UIImage {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
public enum OderoColors {
  case success
  case warning
  case error
  case gray
  case black
  public static func == (a: OderoPaySdk.OderoColors, b: OderoPaySdk.OderoColors) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class PKHUDAnimation {
  public static let discreteRotation: QuartzCore.CAAnimation
  @objc deinit
}
public typealias Parameters = [Swift.String : Any]
public protocol ParameterEncoding {
  func encode(_ urlRequest: OderoPaySdk.URLRequestConvertible, with parameters: OderoPaySdk.Parameters?) throws -> Foundation.URLRequest
}
public struct URLEncoding : OderoPaySdk.ParameterEncoding {
  public enum Destination {
    case methodDependent
    case queryString
    case httpBody
    public static func == (a: OderoPaySdk.URLEncoding.Destination, b: OderoPaySdk.URLEncoding.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ArrayEncoding {
    case brackets
    case noBrackets
    case indexInBrackets
    public static func == (a: OderoPaySdk.URLEncoding.ArrayEncoding, b: OderoPaySdk.URLEncoding.ArrayEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum BoolEncoding {
    case numeric
    case literal
    public static func == (a: OderoPaySdk.URLEncoding.BoolEncoding, b: OderoPaySdk.URLEncoding.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: OderoPaySdk.URLEncoding {
    get
  }
  public static var queryString: OderoPaySdk.URLEncoding {
    get
  }
  public static var httpBody: OderoPaySdk.URLEncoding {
    get
  }
  public let destination: OderoPaySdk.URLEncoding.Destination
  public let arrayEncoding: OderoPaySdk.URLEncoding.ArrayEncoding
  public let boolEncoding: OderoPaySdk.URLEncoding.BoolEncoding
  public init(destination: OderoPaySdk.URLEncoding.Destination = .methodDependent, arrayEncoding: OderoPaySdk.URLEncoding.ArrayEncoding = .brackets, boolEncoding: OderoPaySdk.URLEncoding.BoolEncoding = .numeric)
  public func encode(_ urlRequest: OderoPaySdk.URLRequestConvertible, with parameters: OderoPaySdk.Parameters?) throws -> Foundation.URLRequest
  public func queryComponents(fromKey key: Swift.String, value: Any) -> [(Swift.String, Swift.String)]
  public func escape(_ string: Swift.String) -> Swift.String
}
public struct JSONEncoding : OderoPaySdk.ParameterEncoding {
  public enum Error : Swift.Error {
    case invalidJSONObject
    public static func == (a: OderoPaySdk.JSONEncoding.Error, b: OderoPaySdk.JSONEncoding.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: OderoPaySdk.JSONEncoding {
    get
  }
  public static var prettyPrinted: OderoPaySdk.JSONEncoding {
    get
  }
  public let options: Foundation.JSONSerialization.WritingOptions
  public init(options: Foundation.JSONSerialization.WritingOptions = [])
  public func encode(_ urlRequest: OderoPaySdk.URLRequestConvertible, with parameters: OderoPaySdk.Parameters?) throws -> Foundation.URLRequest
  public func encode(_ urlRequest: OderoPaySdk.URLRequestConvertible, withJSONObject jsonObject: Any? = nil) throws -> Foundation.URLRequest
}
extension OderoPaySdk.JSONEncoding.Error {
  public var localizedDescription: Swift.String {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) open class PKHUDSuccessView : OderoPaySdk.PKHUDSquareBaseView, OderoPaySdk.PKHUDAnimating {
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String? = nil, subtitle: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc open func startAnimation()
  @_Concurrency.MainActor(unsafe) @objc open func stopAnimation()
  @objc deinit
}
public struct RequestAdapterState {
  public let requestID: Foundation.UUID
  public let session: OderoPaySdk.Session
}
public protocol RequestAdapter {
  func adapt(_ urlRequest: Foundation.URLRequest, for session: OderoPaySdk.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  func adapt(_ urlRequest: Foundation.URLRequest, using state: OderoPaySdk.RequestAdapterState, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
}
extension OderoPaySdk.RequestAdapter {
  public func adapt(_ urlRequest: Foundation.URLRequest, using state: OderoPaySdk.RequestAdapterState, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
}
public enum RetryResult {
  case retry
  case retryWithDelay(Foundation.TimeInterval)
  case doNotRetry
  case doNotRetryWithError(Swift.Error)
}
public protocol RequestRetrier {
  func retry(_ request: OderoPaySdk.Request, for session: OderoPaySdk.Session, dueTo error: Swift.Error, completion: @escaping (OderoPaySdk.RetryResult) -> Swift.Void)
}
public protocol RequestInterceptor : OderoPaySdk.RequestAdapter, OderoPaySdk.RequestRetrier {
}
extension OderoPaySdk.RequestInterceptor {
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: OderoPaySdk.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  public func retry(_ request: OderoPaySdk.Request, for session: OderoPaySdk.Session, dueTo error: Swift.Error, completion: @escaping (OderoPaySdk.RetryResult) -> Swift.Void)
}
public typealias AdaptHandler = (Foundation.URLRequest, OderoPaySdk.Session, _ completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void) -> Swift.Void
public typealias RetryHandler = (OderoPaySdk.Request, OderoPaySdk.Session, Swift.Error, _ completion: @escaping (OderoPaySdk.RetryResult) -> Swift.Void) -> Swift.Void
open class Adapter : OderoPaySdk.RequestInterceptor {
  public init(_ adaptHandler: @escaping OderoPaySdk.AdaptHandler)
  open func adapt(_ urlRequest: Foundation.URLRequest, for session: OderoPaySdk.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  open func adapt(_ urlRequest: Foundation.URLRequest, using state: OderoPaySdk.RequestAdapterState, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  @objc deinit
}
extension OderoPaySdk.RequestAdapter where Self == OderoPaySdk.Adapter {
  public static func adapter(using closure: @escaping OderoPaySdk.AdaptHandler) -> OderoPaySdk.Adapter
}
open class Retrier : OderoPaySdk.RequestInterceptor {
  public init(_ retryHandler: @escaping OderoPaySdk.RetryHandler)
  open func retry(_ request: OderoPaySdk.Request, for session: OderoPaySdk.Session, dueTo error: Swift.Error, completion: @escaping (OderoPaySdk.RetryResult) -> Swift.Void)
  @objc deinit
}
extension OderoPaySdk.RequestRetrier where Self == OderoPaySdk.Retrier {
  public static func retrier(using closure: @escaping OderoPaySdk.RetryHandler) -> OderoPaySdk.Retrier
}
open class Interceptor : OderoPaySdk.RequestInterceptor {
  final public let adapters: [OderoPaySdk.RequestAdapter]
  final public let retriers: [OderoPaySdk.RequestRetrier]
  public init(adaptHandler: @escaping OderoPaySdk.AdaptHandler, retryHandler: @escaping OderoPaySdk.RetryHandler)
  public init(adapter: OderoPaySdk.RequestAdapter, retrier: OderoPaySdk.RequestRetrier)
  public init(adapters: [OderoPaySdk.RequestAdapter] = [], retriers: [OderoPaySdk.RequestRetrier] = [], interceptors: [OderoPaySdk.RequestInterceptor] = [])
  open func adapt(_ urlRequest: Foundation.URLRequest, for session: OderoPaySdk.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  open func adapt(_ urlRequest: Foundation.URLRequest, using state: OderoPaySdk.RequestAdapterState, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  open func retry(_ request: OderoPaySdk.Request, for session: OderoPaySdk.Session, dueTo error: Swift.Error, completion: @escaping (OderoPaySdk.RetryResult) -> Swift.Void)
  @objc deinit
}
extension OderoPaySdk.RequestInterceptor where Self == OderoPaySdk.Interceptor {
  public static func interceptor(adapter: @escaping OderoPaySdk.AdaptHandler, retrier: @escaping OderoPaySdk.RetryHandler) -> OderoPaySdk.Interceptor
  public static func interceptor(adapter: OderoPaySdk.RequestAdapter, retrier: OderoPaySdk.RequestRetrier) -> OderoPaySdk.Interceptor
  public static func interceptor(adapters: [OderoPaySdk.RequestAdapter] = [], retriers: [OderoPaySdk.RequestRetrier] = [], interceptors: [OderoPaySdk.RequestInterceptor] = []) -> OderoPaySdk.Interceptor
}
public protocol CachedResponseHandler {
  func dataTask(_ task: Foundation.URLSessionDataTask, willCacheResponse response: Foundation.CachedURLResponse, completion: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
public struct ResponseCacher {
  public enum Behavior {
    case cache
    case doNotCache
    case modify((Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Foundation.CachedURLResponse?)
  }
  public static let cache: OderoPaySdk.ResponseCacher
  public static let doNotCache: OderoPaySdk.ResponseCacher
  public let behavior: OderoPaySdk.ResponseCacher.Behavior
  public init(behavior: OderoPaySdk.ResponseCacher.Behavior)
}
extension OderoPaySdk.ResponseCacher : OderoPaySdk.CachedResponseHandler {
  public func dataTask(_ task: Foundation.URLSessionDataTask, willCacheResponse response: Foundation.CachedURLResponse, completion: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
extension OderoPaySdk.CachedResponseHandler where Self == OderoPaySdk.ResponseCacher {
  public static var cache: OderoPaySdk.ResponseCacher {
    get
  }
  public static var doNotCache: OderoPaySdk.ResponseCacher {
    get
  }
  public static func modify(using closure: @escaping ((Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Foundation.CachedURLResponse?)) -> OderoPaySdk.ResponseCacher
}
public enum OderoException : Swift.Error {
  case SDKAlreadyInitialized(errorMessage: Swift.String)
  case InvalidInput(errorMessage: Swift.String)
  case SDKNotInitialized(errorMessage: Swift.String)
}
@objc public protocol PKHUDAnimating {
  @objc func startAnimation()
  @objc optional func stopAnimation()
}
public enum AFError : Swift.Error {
  public enum MultipartEncodingFailureReason {
    case bodyPartURLInvalid(url: Foundation.URL)
    case bodyPartFilenameInvalid(in: Foundation.URL)
    case bodyPartFileNotReachable(at: Foundation.URL)
    case bodyPartFileNotReachableWithError(atURL: Foundation.URL, error: Swift.Error)
    case bodyPartFileIsDirectory(at: Foundation.URL)
    case bodyPartFileSizeNotAvailable(at: Foundation.URL)
    case bodyPartFileSizeQueryFailedWithError(forURL: Foundation.URL, error: Swift.Error)
    case bodyPartInputStreamCreationFailed(for: Foundation.URL)
    case outputStreamCreationFailed(for: Foundation.URL)
    case outputStreamFileAlreadyExists(at: Foundation.URL)
    case outputStreamURLInvalid(url: Foundation.URL)
    case outputStreamWriteFailed(error: Swift.Error)
    case inputStreamReadFailed(error: Swift.Error)
  }
  public struct UnexpectedInputStreamLength : Swift.Error {
    public var bytesExpected: Swift.UInt64
    public var bytesRead: Swift.UInt64
  }
  public enum ParameterEncodingFailureReason {
    case missingURL
    case jsonEncodingFailed(error: Swift.Error)
    case customEncodingFailed(error: Swift.Error)
  }
  public enum ParameterEncoderFailureReason {
    public enum RequiredComponent {
      case url
      case httpMethod(rawValue: Swift.String)
    }
    case missingRequiredComponent(OderoPaySdk.AFError.ParameterEncoderFailureReason.RequiredComponent)
    case encoderFailed(error: Swift.Error)
  }
  public enum ResponseValidationFailureReason {
    case dataFileNil
    case dataFileReadFailed(at: Foundation.URL)
    case missingContentType(acceptableContentTypes: [Swift.String])
    case unacceptableContentType(acceptableContentTypes: [Swift.String], responseContentType: Swift.String)
    case unacceptableStatusCode(code: Swift.Int)
    case customValidationFailed(error: Swift.Error)
  }
  public enum ResponseSerializationFailureReason {
    case inputDataNilOrZeroLength
    case inputFileNil
    case inputFileReadFailed(at: Foundation.URL)
    case stringSerializationFailed(encoding: Swift.String.Encoding)
    case jsonSerializationFailed(error: Swift.Error)
    case decodingFailed(error: Swift.Error)
    case customSerializationFailed(error: Swift.Error)
    case invalidEmptyResponse(type: Swift.String)
  }
  public enum ServerTrustFailureReason {
    public struct Output {
      public let host: Swift.String
      public let trust: Security.SecTrust
      public let status: Darwin.OSStatus
      public let result: Security.SecTrustResultType
    }
    case noRequiredEvaluator(host: Swift.String)
    case noCertificatesFound
    case noPublicKeysFound
    case policyApplicationFailed(trust: Security.SecTrust, policy: Security.SecPolicy, status: Darwin.OSStatus)
    case settingAnchorCertificatesFailed(status: Darwin.OSStatus, certificates: [Security.SecCertificate])
    case revocationPolicyCreationFailed
    case trustEvaluationFailed(error: Swift.Error?)
    case defaultEvaluationFailed(output: OderoPaySdk.AFError.ServerTrustFailureReason.Output)
    case hostValidationFailed(output: OderoPaySdk.AFError.ServerTrustFailureReason.Output)
    case revocationCheckFailed(output: OderoPaySdk.AFError.ServerTrustFailureReason.Output, options: OderoPaySdk.RevocationTrustEvaluator.Options)
    case certificatePinningFailed(host: Swift.String, trust: Security.SecTrust, pinnedCertificates: [Security.SecCertificate], serverCertificates: [Security.SecCertificate])
    case publicKeyPinningFailed(host: Swift.String, trust: Security.SecTrust, pinnedKeys: [Security.SecKey], serverKeys: [Security.SecKey])
    case customEvaluationFailed(error: Swift.Error)
  }
  public enum URLRequestValidationFailureReason {
    case bodyDataInGETRequest(Foundation.Data)
  }
  case createUploadableFailed(error: Swift.Error)
  case createURLRequestFailed(error: Swift.Error)
  case downloadedFileMoveFailed(error: Swift.Error, source: Foundation.URL, destination: Foundation.URL)
  case explicitlyCancelled
  case invalidURL(url: OderoPaySdk.URLConvertible)
  case multipartEncodingFailed(reason: OderoPaySdk.AFError.MultipartEncodingFailureReason)
  case parameterEncodingFailed(reason: OderoPaySdk.AFError.ParameterEncodingFailureReason)
  case parameterEncoderFailed(reason: OderoPaySdk.AFError.ParameterEncoderFailureReason)
  case requestAdaptationFailed(error: Swift.Error)
  case requestRetryFailed(retryError: Swift.Error, originalError: Swift.Error)
  case responseValidationFailed(reason: OderoPaySdk.AFError.ResponseValidationFailureReason)
  case responseSerializationFailed(reason: OderoPaySdk.AFError.ResponseSerializationFailureReason)
  case serverTrustEvaluationFailed(reason: OderoPaySdk.AFError.ServerTrustFailureReason)
  case sessionDeinitialized
  case sessionInvalidated(error: Swift.Error?)
  case sessionTaskFailed(error: Swift.Error)
  case urlRequestValidationFailed(reason: OderoPaySdk.AFError.URLRequestValidationFailureReason)
}
extension Swift.Error {
  public var asAFError: OderoPaySdk.AFError? {
    get
  }
  public func asAFError(orFailWith message: @autoclosure () -> Swift.String, file: Swift.StaticString = #file, line: Swift.UInt = #line) -> OderoPaySdk.AFError
}
extension OderoPaySdk.AFError {
  public var isSessionDeinitializedError: Swift.Bool {
    get
  }
  public var isSessionInvalidatedError: Swift.Bool {
    get
  }
  public var isExplicitlyCancelledError: Swift.Bool {
    get
  }
  public var isInvalidURLError: Swift.Bool {
    get
  }
  public var isParameterEncodingError: Swift.Bool {
    get
  }
  public var isParameterEncoderError: Swift.Bool {
    get
  }
  public var isMultipartEncodingError: Swift.Bool {
    get
  }
  public var isRequestAdaptationError: Swift.Bool {
    get
  }
  public var isResponseValidationError: Swift.Bool {
    get
  }
  public var isResponseSerializationError: Swift.Bool {
    get
  }
  public var isServerTrustEvaluationError: Swift.Bool {
    get
  }
  public var isRequestRetryError: Swift.Bool {
    get
  }
  public var isCreateUploadableError: Swift.Bool {
    get
  }
  public var isCreateURLRequestError: Swift.Bool {
    get
  }
  public var isDownloadedFileMoveError: Swift.Bool {
    get
  }
  public var isSessionTaskError: Swift.Bool {
    get
  }
}
extension OderoPaySdk.AFError {
  public var urlConvertible: OderoPaySdk.URLConvertible? {
    get
  }
  public var url: Foundation.URL? {
    get
  }
  public var underlyingError: Swift.Error? {
    get
  }
  public var acceptableContentTypes: [Swift.String]? {
    get
  }
  public var responseContentType: Swift.String? {
    get
  }
  public var responseCode: Swift.Int? {
    get
  }
  public var failedStringEncoding: Swift.String.Encoding? {
    get
  }
  public var sourceURL: Foundation.URL? {
    get
  }
  public var destinationURL: Foundation.URL? {
    get
  }
  public var downloadResumeData: Foundation.Data? {
    get
  }
}
extension OderoPaySdk.AFError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct HTTPHeaders {
  public init()
  public init(_ headers: [OderoPaySdk.HTTPHeader])
  public init(_ dictionary: [Swift.String : Swift.String])
  public mutating func add(name: Swift.String, value: Swift.String)
  public mutating func add(_ header: OderoPaySdk.HTTPHeader)
  public mutating func update(name: Swift.String, value: Swift.String)
  public mutating func update(_ header: OderoPaySdk.HTTPHeader)
  public mutating func remove(name: Swift.String)
  public mutating func sort()
  public func sorted() -> OderoPaySdk.HTTPHeaders
  public func value(for name: Swift.String) -> Swift.String?
  public subscript(name: Swift.String) -> Swift.String? {
    get
    set
  }
  public var dictionary: [Swift.String : Swift.String] {
    get
  }
}
extension OderoPaySdk.HTTPHeaders : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Swift.String)...)
  public typealias Key = Swift.String
  public typealias Value = Swift.String
}
extension OderoPaySdk.HTTPHeaders : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: OderoPaySdk.HTTPHeader...)
  public typealias ArrayLiteralElement = OderoPaySdk.HTTPHeader
}
extension OderoPaySdk.HTTPHeaders : Swift.Sequence {
  public func makeIterator() -> Swift.IndexingIterator<[OderoPaySdk.HTTPHeader]>
}
extension OderoPaySdk.HTTPHeaders : Swift.Collection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(position: Swift.Int) -> OderoPaySdk.HTTPHeader {
    get
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public typealias Element = OderoPaySdk.HTTPHeader
  public typealias Index = Swift.Int
  public typealias Indices = Swift.DefaultIndices<OderoPaySdk.HTTPHeaders>
  public typealias Iterator = Swift.IndexingIterator<[OderoPaySdk.HTTPHeader]>
  public typealias SubSequence = Swift.Slice<OderoPaySdk.HTTPHeaders>
}
extension OderoPaySdk.HTTPHeaders : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct HTTPHeader : Swift.Hashable {
  public let name: Swift.String
  public let value: Swift.String
  public init(name: Swift.String, value: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OderoPaySdk.HTTPHeader, b: OderoPaySdk.HTTPHeader) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension OderoPaySdk.HTTPHeader : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension OderoPaySdk.HTTPHeader {
  public static func accept(_ value: Swift.String) -> OderoPaySdk.HTTPHeader
  public static func acceptCharset(_ value: Swift.String) -> OderoPaySdk.HTTPHeader
  public static func acceptLanguage(_ value: Swift.String) -> OderoPaySdk.HTTPHeader
  public static func acceptEncoding(_ value: Swift.String) -> OderoPaySdk.HTTPHeader
  public static func authorization(username: Swift.String, password: Swift.String) -> OderoPaySdk.HTTPHeader
  public static func authorization(bearerToken: Swift.String) -> OderoPaySdk.HTTPHeader
  public static func authorization(_ value: Swift.String) -> OderoPaySdk.HTTPHeader
  public static func contentDisposition(_ value: Swift.String) -> OderoPaySdk.HTTPHeader
  public static func contentType(_ value: Swift.String) -> OderoPaySdk.HTTPHeader
  public static func userAgent(_ value: Swift.String) -> OderoPaySdk.HTTPHeader
}
extension OderoPaySdk.HTTPHeaders {
  public static let `default`: OderoPaySdk.HTTPHeaders
}
extension OderoPaySdk.HTTPHeader {
  public static let defaultAcceptEncoding: OderoPaySdk.HTTPHeader
  public static let defaultAcceptLanguage: OderoPaySdk.HTTPHeader
  public static let defaultUserAgent: OderoPaySdk.HTTPHeader
}
extension Foundation.URLRequest {
  public var headers: OderoPaySdk.HTTPHeaders {
    get
    set
  }
}
extension Foundation.HTTPURLResponse {
  public var headers: OderoPaySdk.HTTPHeaders {
    get
  }
}
extension Foundation.URLSessionConfiguration {
  public var headers: OderoPaySdk.HTTPHeaders {
    get
    set
  }
}
public enum Months : Swift.String, Swift.Codable {
  case january
  case february
  case march
  case april
  case may
  case june
  case july
  case august
  case september
  case october
  case november
  case december
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol ParameterEncoder {
  func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
}
open class JSONParameterEncoder : OderoPaySdk.ParameterEncoder {
  public static var `default`: OderoPaySdk.JSONParameterEncoder {
    get
  }
  public static var prettyPrinted: OderoPaySdk.JSONParameterEncoder {
    get
  }
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  public static var sortedKeys: OderoPaySdk.JSONParameterEncoder {
    get
  }
  final public let encoder: Foundation.JSONEncoder
  public init(encoder: Foundation.JSONEncoder = JSONEncoder())
  open func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
  @objc deinit
}
extension OderoPaySdk.ParameterEncoder where Self == OderoPaySdk.JSONParameterEncoder {
  public static var json: OderoPaySdk.JSONParameterEncoder {
    get
  }
  public static func json(encoder: Foundation.JSONEncoder = JSONEncoder()) -> OderoPaySdk.JSONParameterEncoder
}
open class URLEncodedFormParameterEncoder : OderoPaySdk.ParameterEncoder {
  public enum Destination {
    case methodDependent
    case queryString
    case httpBody
    public static func == (a: OderoPaySdk.URLEncodedFormParameterEncoder.Destination, b: OderoPaySdk.URLEncodedFormParameterEncoder.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: OderoPaySdk.URLEncodedFormParameterEncoder {
    get
  }
  final public let encoder: OderoPaySdk.URLEncodedFormEncoder
  final public let destination: OderoPaySdk.URLEncodedFormParameterEncoder.Destination
  public init(encoder: OderoPaySdk.URLEncodedFormEncoder = URLEncodedFormEncoder(), destination: OderoPaySdk.URLEncodedFormParameterEncoder.Destination = .methodDependent)
  open func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
  @objc deinit
}
extension OderoPaySdk.ParameterEncoder where Self == OderoPaySdk.URLEncodedFormParameterEncoder {
  public static var urlEncodedForm: OderoPaySdk.URLEncodedFormParameterEncoder {
    get
  }
  public static func urlEncodedForm(encoder: OderoPaySdk.URLEncodedFormEncoder = URLEncodedFormEncoder(), destination: OderoPaySdk.URLEncodedFormParameterEncoder.Destination = .methodDependent) -> OderoPaySdk.URLEncodedFormParameterEncoder
}
extension OderoPaySdk.Request {
  public static let didResumeNotification: Foundation.Notification.Name
  public static let didSuspendNotification: Foundation.Notification.Name
  public static let didCancelNotification: Foundation.Notification.Name
  public static let didFinishNotification: Foundation.Notification.Name
  public static let didResumeTaskNotification: Foundation.Notification.Name
  public static let didSuspendTaskNotification: Foundation.Notification.Name
  public static let didCancelTaskNotification: Foundation.Notification.Name
  public static let didCompleteTaskNotification: Foundation.Notification.Name
}
extension Foundation.Notification {
  public var request: OderoPaySdk.Request? {
    get
  }
}
@_hasMissingDesignatedInitializers final public class AlamofireNotifications : OderoPaySdk.EventMonitor {
  final public func requestDidResume(_ request: OderoPaySdk.Request)
  final public func requestDidSuspend(_ request: OderoPaySdk.Request)
  final public func requestDidCancel(_ request: OderoPaySdk.Request)
  final public func requestDidFinish(_ request: OderoPaySdk.Request)
  final public func request(_ request: OderoPaySdk.Request, didResumeTask task: Foundation.URLSessionTask)
  final public func request(_ request: OderoPaySdk.Request, didSuspendTask task: Foundation.URLSessionTask)
  final public func request(_ request: OderoPaySdk.Request, didCancelTask task: Foundation.URLSessionTask)
  final public func request(_ request: OderoPaySdk.Request, didCompleteTask task: Foundation.URLSessionTask, with error: OderoPaySdk.AFError?)
  @objc deinit
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OderoPaySdk.Request {
  #if compiler(>=5.3) && $RethrowsProtocol
  public func uploadProgress(bufferingPolicy: OderoPaySdk.StreamOf<Foundation.Progress>.BufferingPolicy = .unbounded) -> OderoPaySdk.StreamOf<Foundation.Progress>
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func downloadProgress(bufferingPolicy: OderoPaySdk.StreamOf<Foundation.Progress>.BufferingPolicy = .unbounded) -> OderoPaySdk.StreamOf<Foundation.Progress>
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func urlRequests(bufferingPolicy: OderoPaySdk.StreamOf<Foundation.URLRequest>.BufferingPolicy = .unbounded) -> OderoPaySdk.StreamOf<Foundation.URLRequest>
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func urlSessionTasks(bufferingPolicy: OderoPaySdk.StreamOf<Foundation.URLSessionTask>.BufferingPolicy = .unbounded) -> OderoPaySdk.StreamOf<Foundation.URLSessionTask>
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func cURLDescriptions(bufferingPolicy: OderoPaySdk.StreamOf<Swift.String>.BufferingPolicy = .unbounded) -> OderoPaySdk.StreamOf<Swift.String>
  #endif
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct DataTask<Value> {
  #if compiler(>=5.3) && $EffectfulProp
  public var response: OderoPaySdk.DataResponse<Value, OderoPaySdk.AFError> {
    get async
  }
  #endif
  #if compiler(>=5.3) && $EffectfulProp
  public var result: Swift.Result<Value, OderoPaySdk.AFError> {
    get async
  }
  #endif
  #if compiler(>=5.3) && $EffectfulProp
  public var value: Value {
    get async throws
  }
  #endif
  public func cancel()
  public func resume()
  public func suspend()
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OderoPaySdk.DataRequest {
  public func serializingData(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = false, dataPreprocessor: OderoPaySdk.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> OderoPaySdk.DataTask<Foundation.Data>
  public func serializingDecodable<Value>(_ type: Value.Type = Value.self, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = false, dataPreprocessor: OderoPaySdk.DataPreprocessor = DecodableResponseSerializer<Value>.defaultDataPreprocessor, decoder: OderoPaySdk.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<Value>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = DecodableResponseSerializer<Value>.defaultEmptyRequestMethods) -> OderoPaySdk.DataTask<Value> where Value : Swift.Decodable
  public func serializingString(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = false, dataPreprocessor: OderoPaySdk.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> OderoPaySdk.DataTask<Swift.String>
  public func serializingResponse<Serializer>(using serializer: Serializer, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = false) -> OderoPaySdk.DataTask<Serializer.SerializedObject> where Serializer : OderoPaySdk.ResponseSerializer
  public func serializingResponse<Serializer>(using serializer: Serializer, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = false) -> OderoPaySdk.DataTask<Serializer.SerializedObject> where Serializer : OderoPaySdk.DataResponseSerializerProtocol
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct DownloadTask<Value> {
  #if compiler(>=5.3) && $EffectfulProp
  public var response: OderoPaySdk.DownloadResponse<Value, OderoPaySdk.AFError> {
    get async
  }
  #endif
  #if compiler(>=5.3) && $EffectfulProp
  public var result: Swift.Result<Value, OderoPaySdk.AFError> {
    get async
  }
  #endif
  #if compiler(>=5.3) && $EffectfulProp
  public var value: Value {
    get async throws
  }
  #endif
  public func cancel()
  public func resume()
  public func suspend()
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OderoPaySdk.DownloadRequest {
  public func serializingData(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = false, dataPreprocessor: OderoPaySdk.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> OderoPaySdk.DownloadTask<Foundation.Data>
  public func serializingDecodable<Value>(_ type: Value.Type = Value.self, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = false, dataPreprocessor: OderoPaySdk.DataPreprocessor = DecodableResponseSerializer<Value>.defaultDataPreprocessor, decoder: OderoPaySdk.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<Value>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = DecodableResponseSerializer<Value>.defaultEmptyRequestMethods) -> OderoPaySdk.DownloadTask<Value> where Value : Swift.Decodable
  public func serializingDownloadedFileURL(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = false) -> OderoPaySdk.DownloadTask<Foundation.URL>
  public func serializingString(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = false, dataPreprocessor: OderoPaySdk.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<OderoPaySdk.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> OderoPaySdk.DownloadTask<Swift.String>
  public func serializingDownload<Serializer>(using serializer: Serializer, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = false) -> OderoPaySdk.DownloadTask<Serializer.SerializedObject> where Serializer : OderoPaySdk.ResponseSerializer
  public func serializingDownload<Serializer>(using serializer: Serializer, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = false) -> OderoPaySdk.DownloadTask<Serializer.SerializedObject> where Serializer : OderoPaySdk.DownloadResponseSerializerProtocol
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct DataStreamTask {
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias Stream<Success, Failure> = OderoPaySdk.StreamOf<OderoPaySdk.DataStreamRequest.Stream<Success, Failure>> where Failure : Swift.Error
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func streamingData(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, bufferingPolicy: OderoPaySdk.DataStreamTask.Stream<Foundation.Data, Swift.Never>.BufferingPolicy = .unbounded) -> OderoPaySdk.DataStreamTask.Stream<Foundation.Data, Swift.Never>
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func streamingStrings(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, bufferingPolicy: OderoPaySdk.DataStreamTask.Stream<Swift.String, Swift.Never>.BufferingPolicy = .unbounded) -> OderoPaySdk.DataStreamTask.Stream<Swift.String, Swift.Never>
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func streamingDecodables<T>(_ type: T.Type = T.self, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, bufferingPolicy: OderoPaySdk.DataStreamTask.Stream<T, OderoPaySdk.AFError>.BufferingPolicy = .unbounded) -> OderoPaySdk.DataStreamTask.Stream<T, OderoPaySdk.AFError> where T : Swift.Decodable
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func streamingResponses<Serializer>(serializedUsing serializer: Serializer, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, bufferingPolicy: OderoPaySdk.DataStreamTask.Stream<Serializer.SerializedObject, OderoPaySdk.AFError>.BufferingPolicy = .unbounded) -> OderoPaySdk.DataStreamTask.Stream<Serializer.SerializedObject, OderoPaySdk.AFError> where Serializer : OderoPaySdk.DataStreamSerializer
  #endif
  public func cancel()
  public func resume()
  public func suspend()
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OderoPaySdk.DataStreamRequest {
  final public func streamTask() -> OderoPaySdk.DataStreamTask
}
#if compiler(>=5.3) && $RethrowsProtocol
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct StreamOf<Element> : _Concurrency.AsyncSequence {
  public typealias AsyncIterator = OderoPaySdk.StreamOf<Element>.Iterator
  public typealias BufferingPolicy = _Concurrency.AsyncStream<Element>.Continuation.BufferingPolicy
  public func makeAsyncIterator() -> OderoPaySdk.StreamOf<Element>.Iterator
  public struct Iterator : _Concurrency.AsyncIteratorProtocol {
    #if compiler(>=5.3) && $AsyncAwait
    public mutating func next() async -> Element?
    #endif
  }
}
#endif
open class MultipartFormData {
  public static let encodingMemoryThreshold: Swift.UInt64
  open var contentType: Swift.String {
    get
    set
  }
  public var contentLength: Swift.UInt64 {
    get
  }
  final public let boundary: Swift.String
  public init(fileManager: Foundation.FileManager = .default, boundary: Swift.String? = nil)
  public func append(_ data: Foundation.Data, withName name: Swift.String, fileName: Swift.String? = nil, mimeType: Swift.String? = nil)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, headers: OderoPaySdk.HTTPHeaders)
  public func encode() throws -> Foundation.Data
  public func writeEncodedData(to fileURL: Foundation.URL) throws
  @objc deinit
}
public let AF: OderoPaySdk.Session
extension OderoPaySdk.Currency : Swift.Equatable {}
extension OderoPaySdk.Currency : Swift.Hashable {}
extension OderoPaySdk.Currency : Swift.RawRepresentable {}
extension OderoPaySdk.Request.State : Swift.Equatable {}
extension OderoPaySdk.Request.State : Swift.Hashable {}
extension OderoPaySdk.URLEncodedFormEncoder.ArrayEncoding : Swift.Equatable {}
extension OderoPaySdk.URLEncodedFormEncoder.ArrayEncoding : Swift.Hashable {}
extension OderoPaySdk.URLEncodedFormEncoder.BoolEncoding : Swift.Equatable {}
extension OderoPaySdk.URLEncodedFormEncoder.BoolEncoding : Swift.Hashable {}
extension OderoPaySdk.URLEncodedFormEncoder.SpaceEncoding : Swift.Equatable {}
extension OderoPaySdk.URLEncodedFormEncoder.SpaceEncoding : Swift.Hashable {}
extension OderoPaySdk.Language : Swift.Equatable {}
extension OderoPaySdk.Language : Swift.Hashable {}
extension OderoPaySdk.Language : Swift.RawRepresentable {}
extension OderoPaySdk.AuthenticationError : Swift.Equatable {}
extension OderoPaySdk.AuthenticationError : Swift.Hashable {}
extension OderoPaySdk.PaymentPhase : Swift.Equatable {}
extension OderoPaySdk.PaymentPhase : Swift.Hashable {}
extension OderoPaySdk.PaymentPhase : Swift.RawRepresentable {}
extension OderoPaySdk.Environment : Swift.Equatable {}
extension OderoPaySdk.Environment : Swift.Hashable {}
extension OderoPaySdk.Environment : Swift.RawRepresentable {}
extension OderoPaySdk.PaymentType : Swift.Equatable {}
extension OderoPaySdk.PaymentType : Swift.Hashable {}
extension OderoPaySdk.PaymentType : Swift.RawRepresentable {}
extension OderoPaySdk.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType : Swift.Equatable {}
extension OderoPaySdk.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType : Swift.Hashable {}
extension OderoPaySdk.Installment : Swift.Equatable {}
extension OderoPaySdk.Installment : Swift.Hashable {}
extension OderoPaySdk.Installment : Swift.RawRepresentable {}
extension OderoPaySdk.PaymentMethod : Swift.Equatable {}
extension OderoPaySdk.PaymentMethod : Swift.Hashable {}
extension OderoPaySdk.PaymentMethod : Swift.RawRepresentable {}
extension OderoPaySdk.OderoColors : Swift.Equatable {}
extension OderoPaySdk.OderoColors : Swift.Hashable {}
extension OderoPaySdk.URLEncoding.Destination : Swift.Equatable {}
extension OderoPaySdk.URLEncoding.Destination : Swift.Hashable {}
extension OderoPaySdk.URLEncoding.ArrayEncoding : Swift.Equatable {}
extension OderoPaySdk.URLEncoding.ArrayEncoding : Swift.Hashable {}
extension OderoPaySdk.URLEncoding.BoolEncoding : Swift.Equatable {}
extension OderoPaySdk.URLEncoding.BoolEncoding : Swift.Hashable {}
extension OderoPaySdk.JSONEncoding.Error : Swift.Equatable {}
extension OderoPaySdk.JSONEncoding.Error : Swift.Hashable {}
extension OderoPaySdk.Months : Swift.Equatable {}
extension OderoPaySdk.Months : Swift.Hashable {}
extension OderoPaySdk.Months : Swift.RawRepresentable {}
extension OderoPaySdk.URLEncodedFormParameterEncoder.Destination : Swift.Equatable {}
extension OderoPaySdk.URLEncodedFormParameterEncoder.Destination : Swift.Hashable {}
